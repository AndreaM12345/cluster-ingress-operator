// Code generated by go-bindata.
// sources:
// assets/router/cluster-role-binding.yaml
// assets/router/cluster-role.yaml
// assets/router/daemonset.yaml
// assets/router/namespace.yaml
// assets/router/service-account.yaml
// assets/router/service-cloud.yaml
// DO NOT EDIT!

package manifests

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsRouterClusterRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8f\x31\x4f\xc4\x30\x0c\x85\xf7\xfc\x0a\xeb\x98\x5b\xc4\x86\xb2\x01\x3b\xc3\x21\xb1\xfb\x52\xdf\xd5\x5c\x1b\x57\xb6\x53\x09\x7e\x3d\x8a\x12\x31\xc0\x00\x8c\x96\x9e\xdf\xfb\xbe\x1b\x78\xe4\x3c\x19\xf8\x4c\xa0\x52\x9c\x14\x54\x16\x02\x17\x60\x37\x78\x21\xdd\x39\x11\x3c\xa4\x24\x25\xfb\x18\xae\x9c\xa7\x08\x4f\x4b\x31\x27\x3d\xca\x42\xf5\x9d\xf3\x25\xe0\xc6\xaf\xa4\xc6\x92\x23\xe8\x09\xd3\x88\xc5\x67\x51\xfe\x40\x67\xc9\xe3\xf5\xde\x46\x96\xdb\xfd\x2e\xac\xe4\x38\xa1\x63\x0c\x00\x19\x57\x8a\x90\x5a\xdb\xc0\xf9\xa2\x64\x36\xc8\x46\x8a\x2e\x1a\x1b\x50\xb0\x72\x7a\xa3\xe4\x16\xc3\x00\x6d\xbf\x63\x75\xaa\xaf\xa2\x9e\x6f\xa7\x6d\x98\x28\x82\x6c\x94\x6d\xe6\xb3\x0f\xdf\x67\x7a\xba\xea\x1e\xe9\x5c\x71\x7e\xc8\xfd\x19\xf1\x7f\x93\xc5\x48\x9f\x6b\xbe\x1a\x1d\xec\xdd\x9c\xd6\x68\xcd\x09\x9b\x53\xfc\xad\xa4\x2f\x1f\xc2\x67\x00\x00\x00\xff\xff\x6d\xef\xbb\x8f\xc2\x01\x00\x00")

func assetsRouterClusterRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterClusterRoleBindingYaml,
		"assets/router/cluster-role-binding.yaml",
	)
}

func assetsRouterClusterRoleBindingYaml() (*asset, error) {
	bytes, err := assetsRouterClusterRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/cluster-role-binding.yaml", size: 450, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsRouterClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x31\x8b\x23\x31\x0c\x85\x7b\xff\x0a\x91\xab\x67\xc2\x75\x87\xdb\x2b\xae\x0f\xc7\xf6\x1a\x8f\xb2\xa3\x8d\x63\x19\x49\x9e\xc0\xfe\xfa\x65\x26\x09\x2c\x61\x9b\x09\xe9\x6c\x83\xde\xf7\xde\x93\x7f\xc1\xdf\xdc\xcc\x49\xc1\x92\x54\x1a\x41\x25\x13\x1c\x45\x41\xa5\x39\xa9\xf5\xf0\x7f\x62\x03\x9b\xa4\xe5\x11\x06\x02\x34\x50\x32\x57\x4e\xce\xf3\x7a\xad\x62\xc6\x43\xa6\x3e\x9c\xb8\x8c\xf1\xae\x78\x90\x4c\x01\x2b\xbf\x91\x1a\x4b\x89\xa0\x03\xa6\x1e\x9b\x4f\xa2\xfc\x89\xce\x52\xfa\xd3\x1f\xeb\x59\xf6\xf3\xef\x70\x26\xc7\x11\x1d\x63\x00\x28\x78\xa6\x08\xe9\x2a\xd3\x71\x79\x57\x32\xeb\xa4\x92\xa2\x8b\xc6\xab\xb3\xa0\x2d\x93\xc5\xd0\x01\x56\xfe\xa7\xd2\xaa\x2d\xb3\x1d\xec\x76\x01\x00\xdd\x95\x87\xe6\x74\xb8\x7b\x95\x62\x11\x4a\xcb\x39\xc0\x12\x40\x9a\x26\xba\x4d\x50\x19\xab\x70\x71\x0b\x00\x33\xe9\x70\x7b\xce\x6c\xbe\x1e\x2e\xe8\x69\x7a\x05\xc8\x48\x67\x4e\xb4\x91\xb3\x54\x46\xc5\x39\x7d\xef\x6c\x2b\xda\xe5\x44\x45\x69\x66\xba\x3c\xe0\x93\x12\x3a\xfd\x8c\x7d\xdc\xd4\xe6\xc0\x6d\xf8\xa0\xe4\x98\x12\x99\x6d\xa2\xaf\xe5\x76\xd7\x5f\xd8\x4b\xa5\x62\x13\x1f\xfd\x09\x0b\xab\xc2\x33\x9b\x7d\x1d\x7c\x6f\x8e\xde\x1e\x3c\xb4\x3a\x2e\xc1\xbf\x02\x00\x00\xff\xff\x31\x01\xa5\x06\x81\x03\x00\x00")

func assetsRouterClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterClusterRoleYaml,
		"assets/router/cluster-role.yaml",
	)
}

func assetsRouterClusterRoleYaml() (*asset, error) {
	bytes, err := assetsRouterClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/cluster-role.yaml", size: 897, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsRouterDaemonsetYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x93\xcd\x6e\xdb\x3a\x10\x85\xf7\x7e\x8a\x81\xb2\x96\x1d\x23\xc1\xc5\x2d\x77\x46\x62\x14\x01\x9a\x44\xb0\xdc\x6c\x83\x09\x35\xb1\x08\x53\x24\x31\x1c\x09\x75\x9f\xbe\x60\xfd\x53\xc9\x50\x8c\x74\xd5\xb3\x32\x87\xe4\x77\x66\x78\xac\xad\x71\x95\x82\x7b\xa4\xc6\xbb\x92\x64\x82\xc1\xbc\x10\x47\xe3\x9d\x02\x0c\x21\xce\xba\xf9\xa4\x21\xc1\x0a\x05\xd5\x04\xe0\x0a\x56\x14\x2c\x6a\xaa\x00\x05\xb8\x75\x62\x1a\x9a\x4e\x00\x1c\x36\xa4\x80\x7d\x2b\xc4\x87\x65\x0c\xa8\x49\x81\x0f\xe4\x62\x6d\xde\x25\xd7\xb6\x8d\x42\x9c\x1b\xb7\x61\x8a\x31\x3f\x9d\xb6\xf8\x46\x36\x26\x3e\x24\xd7\x13\x27\x06\xd2\x17\x5d\x23\x59\xd2\xe2\x79\x7f\xb5\x41\xd1\xf5\xb7\x1e\x6b\x48\xdb\x57\xf6\x8b\x5e\x51\xa8\x09\x16\x85\x0e\x8c\xde\xb0\x49\x1f\x5a\x27\xd9\x81\xd7\x98\xdb\x88\x1f\xc0\x71\xac\xdf\xbf\x89\x3b\xa3\x69\xa1\xb5\x6f\x9d\x3c\x0d\x5f\x31\xc9\xf9\x8a\xca\xc1\x98\x49\x59\x2a\xe7\xec\x2d\x4d\xb7\xed\x1b\xb1\x23\xa1\x38\x35\x7e\x66\xdc\x3b\x63\xa6\x20\x13\x6e\x29\x3b\x9c\xd7\xde\x09\x1a\x47\xdc\xeb\x35\x3f\x8f\xec\x28\xd3\xe0\x86\x14\x64\x95\xd7\x5b\xe2\xc4\x3c\x25\x38\xf3\x6c\x36\xc6\xe5\x35\x06\xf6\x3f\x76\x87\x00\x55\x77\x33\x9d\xcf\xa7\xd7\xd9\x39\xa4\x68\xad\x2d\xbc\x35\x7a\xa7\xe0\xe1\xfd\xc9\x4b\xc1\x14\xc9\x49\xef\x5c\xf0\x2c\xbd\xa6\xfe\xb4\x55\x8b\x84\x5e\xb9\x37\x43\xe1\x59\x14\xfc\x7f\x3d\xd8\x0d\xec\xc5\x6b\x6f\x15\xac\xef\x8a\x0f\x70\xf1\x12\xef\xf6\xf6\xe6\xaf\x80\x51\x50\x2e\x02\xe7\x5f\x6e\xfe\xfb\x14\xf1\x0a\x1e\x89\x37\xa3\xff\xaf\x24\x72\xdd\xd8\xfb\x94\xeb\xc5\xba\x7c\x2d\x9e\x57\xeb\x81\x49\x87\xb6\x4d\xe1\x25\xf7\x6c\xe4\xda\xea\xf9\xfb\x7a\xb9\x7a\x2d\x97\xab\x97\x87\xbb\xe5\xeb\xd3\xe2\x71\x59\x16\x8b\xbb\xe5\x18\xe4\x13\x1f\xee\x51\xd6\x74\xe4\x28\xc6\x82\xfd\x1b\xa9\x01\xcc\x38\x23\x06\xed\x3d\x59\xdc\x95\xa4\xbd\xab\xa2\x82\xf9\x30\xbd\x94\xce\x57\x92\xe1\x45\x80\x80\x52\x2b\x98\xd5\x84\x56\xea\x9f\xe7\x9b\x63\xaf\xcc\x84\x95\xf9\x77\x8d\xfc\x0a\x00\x00\xff\xff\x10\x17\xe1\xc1\x4e\x05\x00\x00")

func assetsRouterDaemonsetYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterDaemonsetYaml,
		"assets/router/daemonset.yaml",
	)
}

func assetsRouterDaemonsetYaml() (*asset, error) {
	bytes, err := assetsRouterDaemonsetYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/daemonset.yaml", size: 1358, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsRouterNamespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcb\xb1\x0d\x02\x31\x0c\x05\xd0\x3e\x53\x58\xd7\x07\x44\x9b\x21\x28\xe9\xad\xe4\x03\x16\x17\x3b\xb2\x7d\xcc\x8f\xa8\x6e\x80\xf7\x11\x1d\x8d\xee\x3c\x11\x8b\x3b\x0a\x2f\x79\xc0\x43\x4c\x1b\x7d\x6f\x65\x22\x79\x70\x72\x2b\x44\xca\x13\x8d\x6c\x41\xe3\x2d\xcf\xac\x7d\x3f\x22\xe1\x55\xf4\xe5\x88\xa8\x6e\x47\xc2\x0b\x11\xab\x5a\x72\x8a\x69\xfc\x1d\x9d\xe6\x22\x76\x55\x1b\xa8\x81\x1d\x3d\xcd\x1b\x6d\x5b\xf9\x05\x00\x00\xff\xff\x68\xe9\x4e\xf7\x84\x00\x00\x00")

func assetsRouterNamespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterNamespaceYaml,
		"assets/router/namespace.yaml",
	)
}

func assetsRouterNamespaceYaml() (*asset, error) {
	bytes, err := assetsRouterNamespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/namespace.yaml", size: 132, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsRouterServiceAccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xce\xb1\x6a\x04\x31\x0c\x84\xe1\xde\x4f\x31\x70\xf5\x1e\xa4\x75\x97\x32\x6d\x02\xe9\x1d\xef\xdc\x9d\xc8\xae\xe5\x48\xf2\x86\xbc\x7d\xd8\xc3\xa5\x40\xf3\xf3\x5d\xf0\x5a\xab\x8e\x16\xb8\xa9\xc1\x74\x04\xcd\x51\x8d\x25\xb8\xe2\xeb\x0f\xf1\x20\xb4\xd3\x4a\xa8\x5d\xf1\x16\xf8\x95\x6d\x83\xf1\x67\x88\x11\x75\x1b\x1e\x34\x78\xd5\xce\x35\x5d\xd0\x69\xbb\xb8\x8b\x36\x87\x71\x7b\x56\x42\xf1\x7e\x86\xd1\x4d\x2b\xdd\xa5\xdd\xaf\xe9\x5b\xda\x9a\xf1\x41\x3b\xa4\x72\x1a\x52\xe9\xf2\x49\x3b\xd7\x19\xc7\x4b\xda\x19\x65\x2d\x51\x72\x02\x5a\xd9\x99\x27\x70\x9e\xde\x4b\x65\x3e\x75\xcd\x1f\x72\x8b\x65\x6a\x16\x69\x77\xa3\xfb\x32\xbf\xff\x03\x00\x00\xff\xff\x46\x51\x70\x49\xe4\x00\x00\x00")

func assetsRouterServiceAccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterServiceAccountYaml,
		"assets/router/service-account.yaml",
	)
}

func assetsRouterServiceAccountYaml() (*asset, error) {
	bytes, err := assetsRouterServiceAccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/service-account.yaml", size: 228, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsRouterServiceCloudYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xb1\x6e\xdc\x40\x0c\x44\x7b\x7d\xc5\x00\xae\x65\x24\x5d\xa0\xd2\x69\x5d\x1c\x92\x43\x7a\x7a\x45\xdd\x2e\xbc\x22\x17\x24\x75\xc9\xfd\x7d\xa0\x3d\xf9\x90\x26\x41\x3a\xed\x80\x9a\x47\xce\x3c\xe1\x55\x69\xc6\x0b\x55\x92\xc4\x86\xef\x6c\xd7\x92\x18\xa1\x68\x95\x12\xa3\x08\x16\x53\x09\xe8\x82\xc8\x0c\xd3\x2d\xd8\x76\x39\x55\xdd\x66\xb0\x5c\x8b\xa9\xac\x2c\xe1\xcf\xc3\x7b\x91\x79\xfa\x30\x19\xa8\x95\x1f\x6c\x5e\x54\x26\x5c\x3f\x0f\x2b\x07\xcd\x14\x34\x0d\xc0\x13\xbe\x71\x07\xcc\xa0\x80\x6d\x12\x65\xe5\xe7\x01\x10\x5a\x79\x3a\x28\xc7\xd3\x1b\x25\x9e\xa0\x8d\xc5\x73\x59\x62\x4c\x75\xf3\x60\x1b\x8b\x5c\x8c\xdd\xc7\xc7\xf4\x5f\x5d\x2b\xbd\x71\xf5\x1d\x0c\x50\x6b\x7f\x00\x70\x7c\x3e\x24\x6f\x9c\xf6\xc1\xb8\x35\x9e\x7a\x3a\x1f\xe1\xfc\x0b\xe0\x5c\x39\x85\xda\x7f\x21\x76\x9f\x73\x2e\x0e\xaa\xae\xc8\xe4\x3d\x59\x5e\x16\x4e\x3d\xe7\x95\xec\xbd\xc8\x05\xaf\x2f\x68\xaa\x15\x41\x76\xe1\x70\x90\x63\x93\xcc\x54\x23\xdf\xf0\x33\xb3\x40\xb4\x9b\x1d\xa5\x34\x9d\x1d\x64\x8c\x66\xec\xbc\x77\x26\x20\x88\xce\x8c\x37\xce\x45\xe6\xce\xf1\x7b\x3b\xfb\xd6\xfc\x2b\xd8\x84\xea\xd9\x68\x59\x4a\x3a\x69\x2d\xe9\xb6\x1f\x9d\xa8\x0e\x40\x53\x8b\x1e\xda\x78\xd4\x92\x23\x5a\x3f\xa8\x99\x86\x26\xad\x13\xce\x5f\x4f\x77\x45\x2d\x26\x7c\xf9\xd4\x1f\xf7\x85\x4f\x5d\xea\xff\xfc\x0e\x00\x00\xff\xff\xcb\xde\x5c\x6a\x67\x02\x00\x00")

func assetsRouterServiceCloudYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterServiceCloudYaml,
		"assets/router/service-cloud.yaml",
	)
}

func assetsRouterServiceCloudYaml() (*asset, error) {
	bytes, err := assetsRouterServiceCloudYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/service-cloud.yaml", size: 615, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/router/cluster-role-binding.yaml": assetsRouterClusterRoleBindingYaml,
	"assets/router/cluster-role.yaml": assetsRouterClusterRoleYaml,
	"assets/router/daemonset.yaml": assetsRouterDaemonsetYaml,
	"assets/router/namespace.yaml": assetsRouterNamespaceYaml,
	"assets/router/service-account.yaml": assetsRouterServiceAccountYaml,
	"assets/router/service-cloud.yaml": assetsRouterServiceCloudYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"router": &bintree{nil, map[string]*bintree{
			"cluster-role-binding.yaml": &bintree{assetsRouterClusterRoleBindingYaml, map[string]*bintree{}},
			"cluster-role.yaml": &bintree{assetsRouterClusterRoleYaml, map[string]*bintree{}},
			"daemonset.yaml": &bintree{assetsRouterDaemonsetYaml, map[string]*bintree{}},
			"namespace.yaml": &bintree{assetsRouterNamespaceYaml, map[string]*bintree{}},
			"service-account.yaml": &bintree{assetsRouterServiceAccountYaml, map[string]*bintree{}},
			"service-cloud.yaml": &bintree{assetsRouterServiceCloudYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

