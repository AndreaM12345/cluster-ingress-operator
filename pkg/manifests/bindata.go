// Code generated by go-bindata.
// sources:
// assets/router/cluster-role-binding.yaml
// assets/router/cluster-role.yaml
// assets/router/daemonset.yaml
// assets/router/namespace.yaml
// assets/router/service-account.yaml
// assets/router/service-cloud.yaml
// DO NOT EDIT!

package manifests

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsRouterClusterRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8f\x31\x4f\xc4\x30\x0c\x85\xf7\xfc\x0a\xeb\x98\x5b\xc4\x86\xb2\x01\x3b\xc3\x21\xb1\xfb\x52\xdf\xd5\x5c\x1b\x57\xb6\x53\x09\x7e\x3d\x8a\x12\x31\xc0\x00\x8c\x96\x9e\xdf\xfb\xbe\x1b\x78\xe4\x3c\x19\xf8\x4c\xa0\x52\x9c\x14\x54\x16\x02\x17\x60\x37\x78\x21\xdd\x39\x11\x3c\xa4\x24\x25\xfb\x18\xae\x9c\xa7\x08\x4f\x4b\x31\x27\x3d\xca\x42\xf5\x9d\xf3\x25\xe0\xc6\xaf\xa4\xc6\x92\x23\xe8\x09\xd3\x88\xc5\x67\x51\xfe\x40\x67\xc9\xe3\xf5\xde\x46\x96\xdb\xfd\x2e\xac\xe4\x38\xa1\x63\x0c\x00\x19\x57\x8a\x90\x5a\xdb\xc0\xf9\xa2\x64\x36\xc8\x46\x8a\x2e\x1a\x1b\x50\xb0\x72\x7a\xa3\xe4\x16\xc3\x00\x6d\xbf\x63\x75\xaa\xaf\xa2\x9e\x6f\xa7\x6d\x98\x28\x82\x6c\x94\x6d\xe6\xb3\x0f\xdf\x67\x7a\xba\xea\x1e\xe9\x5c\x71\x7e\xc8\xfd\x19\xf1\x7f\x93\xc5\x48\x9f\x6b\xbe\x1a\x1d\xec\xdd\x9c\xd6\x68\xcd\x09\x9b\x53\xfc\xad\xa4\x2f\x1f\xc2\x67\x00\x00\x00\xff\xff\x6d\xef\xbb\x8f\xc2\x01\x00\x00")

func assetsRouterClusterRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterClusterRoleBindingYaml,
		"assets/router/cluster-role-binding.yaml",
	)
}

func assetsRouterClusterRoleBindingYaml() (*asset, error) {
	bytes, err := assetsRouterClusterRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/cluster-role-binding.yaml", size: 450, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsRouterClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x31\x8b\x23\x31\x0c\x85\x7b\xff\x0a\x91\xab\x67\xc2\x75\x87\xdb\x2b\xae\x0f\xc7\xf6\x1a\x8f\xb2\xa3\x8d\x63\x19\x49\x9e\xc0\xfe\xfa\x65\x26\x09\x2c\x61\x9b\x09\xe9\x6c\x83\xde\xf7\xde\x93\x7f\xc1\xdf\xdc\xcc\x49\xc1\x92\x54\x1a\x41\x25\x13\x1c\x45\x41\xa5\x39\xa9\xf5\xf0\x7f\x62\x03\x9b\xa4\xe5\x11\x06\x02\x34\x50\x32\x57\x4e\xce\xf3\x7a\xad\x62\xc6\x43\xa6\x3e\x9c\xb8\x8c\xf1\xae\x78\x90\x4c\x01\x2b\xbf\x91\x1a\x4b\x89\xa0\x03\xa6\x1e\x9b\x4f\xa2\xfc\x89\xce\x52\xfa\xd3\x1f\xeb\x59\xf6\xf3\xef\x70\x26\xc7\x11\x1d\x63\x00\x28\x78\xa6\x08\xe9\x2a\xd3\x71\x79\x57\x32\xeb\xa4\x92\xa2\x8b\xc6\xab\xb3\xa0\x2d\x93\xc5\xd0\x01\x56\xfe\xa7\xd2\xaa\x2d\xb3\x1d\xec\x76\x01\x00\xdd\x95\x87\xe6\x74\xb8\x7b\x95\x62\x11\x4a\xcb\x39\xc0\x12\x40\x9a\x26\xba\x4d\x50\x19\xab\x70\x71\x0b\x00\x33\xe9\x70\x7b\xce\x6c\xbe\x1e\x2e\xe8\x69\x7a\x05\xc8\x48\x67\x4e\xb4\x91\xb3\x54\x46\xc5\x39\x7d\xef\x6c\x2b\xda\xe5\x44\x45\x69\x66\xba\x3c\xe0\x93\x12\x3a\xfd\x8c\x7d\xdc\xd4\xe6\xc0\x6d\xf8\xa0\xe4\x98\x12\x99\x6d\xa2\xaf\xe5\x76\xd7\x5f\xd8\x4b\xa5\x62\x13\x1f\xfd\x09\x0b\xab\xc2\x33\x9b\x7d\x1d\x7c\x6f\x8e\xde\x1e\x3c\xb4\x3a\x2e\xc1\xbf\x02\x00\x00\xff\xff\x31\x01\xa5\x06\x81\x03\x00\x00")

func assetsRouterClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterClusterRoleYaml,
		"assets/router/cluster-role.yaml",
	)
}

func assetsRouterClusterRoleYaml() (*asset, error) {
	bytes, err := assetsRouterClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/cluster-role.yaml", size: 897, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsRouterDaemonsetYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x92\x41\x8f\xda\x30\x10\x85\xef\xfc\x0a\x2b\xf7\xc0\x46\xac\xaa\xd6\x37\xc4\x46\xd5\x1e\xca\x46\x24\xdd\x2b\x1a\x9c\x81\x58\x38\x1e\x6b\x3c\x89\x4a\x7f\x7d\x95\x16\x58\x82\xe8\x6a\x7b\xea\x9c\x92\xf1\x9b\x4f\x6f\x9e\x7d\xb0\xbe\xd6\xea\x09\xb0\x25\x5f\xa2\x4c\x20\xd8\x57\xe4\x68\xc9\x6b\x05\x21\xc4\x59\x9f\x4d\x5a\x14\xa8\x41\x40\x4f\x94\xf2\xd0\xa2\x56\x4c\x9d\x20\x9f\x7e\x63\x00\x83\x5a\x51\x40\x1f\x1b\xbb\x93\xd4\xb8\x2e\x0a\x72\x6a\xfd\x9e\x31\xc6\xf4\xa2\x76\xb0\x45\x17\x07\x8c\x1a\xe0\x17\x4e\x0c\x68\x86\xae\x60\x1b\x1c\x08\xfe\x51\x9c\xbb\xbf\xbf\x91\x7b\x6b\x70\x61\x0c\x75\x5e\x56\x63\x13\x43\x79\xaa\xb1\x44\x87\x46\x88\xcf\x43\x4a\x25\x43\x3b\x65\x72\x38\x3d\x74\x5b\x64\x8f\x82\x71\x6a\x69\x66\xfd\x8e\x21\xd1\x2a\x11\xee\x30\x39\xe9\x0d\x79\x01\xeb\x91\xe3\x1b\x21\xbd\xdd\xf8\x5c\xb6\x85\x3d\x6a\x95\xd4\x64\x0e\xc8\x03\xf3\x12\xc0\x8c\xd8\xee\xad\x4f\x1b\x08\x4c\x3f\x8e\xa7\xfd\x75\x3f\x9f\x66\xd9\xf4\x21\xb9\x85\x14\x9d\x73\x05\x39\x6b\x8e\x5a\x3d\xef\x56\x24\x05\x63\x44\x2f\x57\xba\x40\x2c\x57\xa6\xde\x6c\x35\x22\xe1\xaa\x7d\xb5\x43\x41\x2c\x5a\x7d\x7e\x18\x9d\x06\x26\x21\x43\x4e\xab\x6a\x59\xfc\x05\x17\xdf\xe3\x3d\x3e\xce\xff\x09\x18\x05\xe4\x5d\x60\xf6\x65\xfe\xe9\x43\x44\xf4\xfd\xbd\x00\xca\x6a\x51\x95\x9b\xe2\x65\x5d\x8d\x28\x3d\xb8\x6e\xb8\x9d\x01\x9f\xdc\x19\x5b\xbf\x7c\xaf\xf2\xf5\xa6\xcc\xd7\xaf\xcf\xcb\x7c\xb3\x5a\x7c\xcb\xcb\x62\xb1\xcc\xef\x41\x3e\xf0\xb0\xcf\xe5\x6c\x8f\x1e\x63\x2c\x98\xb6\xa8\x47\x30\xeb\xad\x58\x70\x4f\xe8\xe0\x58\xa2\x21\x5f\x47\xad\xb2\xf1\xf5\x0c\xf1\x7f\x45\x19\x0f\x2a\x15\x40\x1a\xad\x66\x0d\x82\x93\xe6\xe7\xed\xe1\xbd\x18\x19\xa1\xb6\xff\xcf\xc8\xaf\x00\x00\x00\xff\xff\x37\xa4\xa9\xc3\x55\x04\x00\x00")

func assetsRouterDaemonsetYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterDaemonsetYaml,
		"assets/router/daemonset.yaml",
	)
}

func assetsRouterDaemonsetYaml() (*asset, error) {
	bytes, err := assetsRouterDaemonsetYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/daemonset.yaml", size: 1109, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsRouterNamespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcb\xb1\x0d\x02\x31\x0c\x05\xd0\x3e\x53\x58\xd7\x07\x44\x9b\x21\x28\xe9\xad\xe4\x03\x16\x17\x3b\xb2\x7d\xcc\x8f\xa8\x6e\x80\xf7\x11\x1d\x8d\xee\x3c\x11\x8b\x3b\x0a\x2f\x79\xc0\x43\x4c\x1b\x7d\x6f\x65\x22\x79\x70\x72\x2b\x44\xca\x13\x8d\x6c\x41\xe3\x2d\xcf\xac\x7d\x3f\x22\xe1\x55\xf4\xe5\x88\xa8\x6e\x47\xc2\x0b\x11\xab\x5a\x72\x8a\x69\xfc\x1d\x9d\xe6\x22\x76\x55\x1b\xa8\x81\x1d\x3d\xcd\x1b\x6d\x5b\xf9\x05\x00\x00\xff\xff\x68\xe9\x4e\xf7\x84\x00\x00\x00")

func assetsRouterNamespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterNamespaceYaml,
		"assets/router/namespace.yaml",
	)
}

func assetsRouterNamespaceYaml() (*asset, error) {
	bytes, err := assetsRouterNamespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/namespace.yaml", size: 132, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsRouterServiceAccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xce\xb1\x6a\x04\x31\x0c\x84\xe1\xde\x4f\x31\x70\xf5\x1e\xa4\x75\x97\x32\x6d\x02\xe9\x1d\xef\xdc\x9d\xc8\xae\xe5\x48\xf2\x86\xbc\x7d\xd8\xc3\xa5\x40\xf3\xf3\x5d\xf0\x5a\xab\x8e\x16\xb8\xa9\xc1\x74\x04\xcd\x51\x8d\x25\xb8\xe2\xeb\x0f\xf1\x20\xb4\xd3\x4a\xa8\x5d\xf1\x16\xf8\x95\x6d\x83\xf1\x67\x88\x11\x75\x1b\x1e\x34\x78\xd5\xce\x35\x5d\xd0\x69\xbb\xb8\x8b\x36\x87\x71\x7b\x56\x42\xf1\x7e\x86\xd1\x4d\x2b\xdd\xa5\xdd\xaf\xe9\x5b\xda\x9a\xf1\x41\x3b\xa4\x72\x1a\x52\xe9\xf2\x49\x3b\xd7\x19\xc7\x4b\xda\x19\x65\x2d\x51\x72\x02\x5a\xd9\x99\x27\x70\x9e\xde\x4b\x65\x3e\x75\xcd\x1f\x72\x8b\x65\x6a\x16\x69\x77\xa3\xfb\x32\xbf\xff\x03\x00\x00\xff\xff\x46\x51\x70\x49\xe4\x00\x00\x00")

func assetsRouterServiceAccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterServiceAccountYaml,
		"assets/router/service-account.yaml",
	)
}

func assetsRouterServiceAccountYaml() (*asset, error) {
	bytes, err := assetsRouterServiceAccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/service-account.yaml", size: 228, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsRouterServiceCloudYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x31\x6f\x1b\x31\x0c\x85\xf7\xfb\x15\x0f\xc8\xec\xa0\xdd\x0a\x8d\xe9\x9a\xc1\x40\x8d\xee\x8c\x8e\x67\x09\xd1\x91\x02\xc9\x73\xeb\x7f\x5f\x9c\x7c\xf1\xd2\x91\x0f\xe2\x27\x7e\xef\x05\xef\x4a\x33\xde\xa8\x91\x64\x36\xfc\x62\xbb\xd5\xcc\x08\x45\x6f\x94\x19\x55\xb0\x98\x4a\x40\x17\x44\x61\x98\x6e\xc1\xb6\xc7\xb9\xe9\x36\x83\xe5\x56\x4d\x65\x65\x09\x7f\x9d\x3e\xab\xcc\xe9\x0b\x32\x51\xaf\xbf\xd9\xbc\xaa\x24\xdc\xbe\x4f\x2b\x07\xcd\x14\x94\x26\x40\x68\xe5\x74\xc0\x8e\xd1\x3b\x65\x4e\xd0\xce\xe2\xa5\x2e\x71\xca\x6d\xf3\x60\x3b\x55\xb9\x1a\xbb\x9f\x9e\xaf\x1b\x7d\x70\xf3\x1d\x03\x50\xef\x4f\x8e\x77\xce\x7b\x1a\xf7\xce\x69\x88\x7d\x79\x4d\x80\x73\xe3\x1c\x6a\xff\xaf\x01\x2f\xb8\x94\xea\xa0\xe6\x8a\x42\x3e\x44\x79\x59\x38\x0f\xed\x95\xec\xb3\xca\x15\xef\x6f\xe8\xaa\x0d\x41\x76\xe5\x70\x90\x63\x93\xc2\xd4\xa2\xdc\xf1\xa7\xb0\x40\x74\xc0\x8e\x8e\xba\xce\x0e\x32\x46\x37\x76\xde\x2b\x14\x10\x44\x67\xc6\x07\x97\x2a\xf3\xf8\xc7\x1f\x65\xbd\x4e\x00\xff\x0d\x36\xa1\x76\x31\x5a\x96\x9a\xcf\xda\x6a\xbe\xef\x22\x99\xda\x04\x74\xb5\x18\xd6\xa7\xa3\xbe\x12\xd1\x87\x4d\x37\x0d\xcd\xda\x12\x2e\x3f\xcf\x8f\x44\x2d\x12\x7e\x7c\x1b\xc3\xe3\xe0\xf3\x88\xc6\xce\xbf\x00\x00\x00\xff\xff\x99\x39\xfe\x89\xf6\x01\x00\x00")

func assetsRouterServiceCloudYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterServiceCloudYaml,
		"assets/router/service-cloud.yaml",
	)
}

func assetsRouterServiceCloudYaml() (*asset, error) {
	bytes, err := assetsRouterServiceCloudYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/service-cloud.yaml", size: 502, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/router/cluster-role-binding.yaml": assetsRouterClusterRoleBindingYaml,
	"assets/router/cluster-role.yaml": assetsRouterClusterRoleYaml,
	"assets/router/daemonset.yaml": assetsRouterDaemonsetYaml,
	"assets/router/namespace.yaml": assetsRouterNamespaceYaml,
	"assets/router/service-account.yaml": assetsRouterServiceAccountYaml,
	"assets/router/service-cloud.yaml": assetsRouterServiceCloudYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"router": &bintree{nil, map[string]*bintree{
			"cluster-role-binding.yaml": &bintree{assetsRouterClusterRoleBindingYaml, map[string]*bintree{}},
			"cluster-role.yaml": &bintree{assetsRouterClusterRoleYaml, map[string]*bintree{}},
			"daemonset.yaml": &bintree{assetsRouterDaemonsetYaml, map[string]*bintree{}},
			"namespace.yaml": &bintree{assetsRouterNamespaceYaml, map[string]*bintree{}},
			"service-account.yaml": &bintree{assetsRouterServiceAccountYaml, map[string]*bintree{}},
			"service-cloud.yaml": &bintree{assetsRouterServiceCloudYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

