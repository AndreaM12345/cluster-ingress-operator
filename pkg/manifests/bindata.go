// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/defaults/cluster-ingress.yaml (592B)
// assets/router/cluster-role-binding.yaml (329B)
// assets/router/cluster-role.yaml (713B)
// assets/router/daemonset.yaml (1.305kB)
// assets/router/namespace.yaml (243B)
// assets/router/service-account.yaml (213B)
// assets/router/service-cloud.yaml (558B)
// manifests/00-cluster-role.yaml (1.344kB)
// manifests/00-custom-resource-definition.yaml (329B)
// manifests/00-namespace.yaml (202B)
// manifests/01-cluster-role-binding.yaml (369B)
// manifests/01-role-binding.yaml (367B)
// manifests/01-role.yaml (522B)
// manifests/01-service-account.yaml (196B)
// manifests/02-deployment.yaml (785B)
// manifests/image-references (201B)

package manifests

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsDefaultsClusterIngressYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x31\x8f\x9b\x40\x10\x85\x7b\x7e\xc5\x93\x5d\x43\x74\x2d\x5d\x94\xa4\x38\x29\x45\xa4\x48\xe9\xc7\xcb\xc3\x4c\xbc\xcc\xae\x76\x07\x9f\x9c\x5f\x1f\x71\x40\x8a\x8b\x4b\x9e\x86\x6f\xbf\x79\x73\xc6\x97\xb8\x54\x67\x79\xb5\x6b\x61\xad\x78\x53\x9f\x30\x70\x94\x25\x3a\xee\x12\x17\xd6\xe6\x8c\x57\xab\x2e\x31\xb2\x20\x24\x1b\xf5\x8a\x9a\x19\x74\xd4\xb0\x8f\x40\x0a\x21\x39\x47\xe5\x00\x71\x94\xc5\x5c\x67\x76\xcd\x4d\x6d\xe8\x3f\xbc\xd1\x48\xd6\x5f\x2c\x55\x93\xf5\xd0\x2d\xeb\x52\xa6\xd5\x49\x47\xef\x34\x7d\xba\xbf\x48\xcc\x93\xbc\x34\x33\x5d\x06\x71\xe9\x1b\xc0\x64\x66\x7f\xa8\xed\xdf\x35\x4b\x60\x8f\x7f\x3f\xb7\x3b\xae\x4d\x99\x45\x3c\x95\x06\x18\xd5\x24\xea\x1f\x96\xba\x52\xce\xf8\x66\x75\x29\x84\x4f\xe2\x48\x16\x1f\xf0\x89\x38\xe6\x11\xc4\x30\x30\xd2\xf9\x9e\x1f\x4d\x84\x6d\x83\x43\x17\xe9\xf2\x9b\xc1\xbb\xff\xf0\xed\xf3\x85\x76\x4c\xbb\x63\x0e\xcd\x66\xad\x71\xb3\xda\xbb\xf9\x9a\x66\x51\x83\xd6\x27\x6d\x62\xa9\x6a\xd7\x77\x2d\xfd\x70\x8f\x55\xc4\xd2\xc0\x1f\x51\x02\x67\x9a\xaf\xd0\x2d\xfa\xc9\xc8\xe0\xa9\x6c\x09\x30\x8b\x87\xe9\xbb\x5c\x18\xeb\x11\x01\xa7\x75\xb2\x2d\x29\xb2\xbb\x2d\x17\x16\xa3\xb3\xae\xe2\x6f\xa9\xdc\x58\x4e\x3d\x4e\xa7\x06\x98\xf4\x3a\x7d\xbe\x8b\x46\xb9\x68\x54\x7f\x6c\x00\x7f\x64\xae\x37\x4e\xcb\xd0\xfc\x0d\x00\x00\xff\xff\xbb\x91\xf4\xc5\x50\x02\x00\x00")

func assetsDefaultsClusterIngressYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDefaultsClusterIngressYaml,
		"assets/defaults/cluster-ingress.yaml",
	)
}

func assetsDefaultsClusterIngressYaml() (*asset, error) {
	bytes, err := assetsDefaultsClusterIngressYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/defaults/cluster-ingress.yaml", size: 592, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xca, 0x98, 0x9d, 0x1a, 0xf7, 0xdc, 0x5f, 0x53, 0xcd, 0x4d, 0x65, 0xc7, 0xae, 0xa1, 0x5, 0x28, 0x1d, 0x15, 0x36, 0x5e, 0xcc, 0x9c, 0x45, 0x91, 0xbd, 0xca, 0x40, 0xa7, 0xa6, 0xbf, 0xbc, 0x13}}
	return a, nil
}

var _assetsRouterClusterRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\x31\x4e\xc4\x40\x0c\x45\xfb\x39\x85\x25\xea\x0c\xa2\x43\xd3\x01\x37\x58\x24\x7a\xef\xc4\xbb\x31\x49\xec\xc8\xf6\xa4\xe0\xf4\x28\x4a\x44\xc3\x4a\x29\x2d\xf9\xbf\xff\xfe\x13\xbc\xb3\xf4\x0e\x31\x10\x98\xb6\x20\x03\xd3\x89\x20\x14\x38\x1c\x3e\xc9\x56\xae\x04\x6f\xb5\x6a\x93\xc8\x69\x64\xe9\x0b\x7c\x4c\xcd\x83\xec\xa2\x13\x6d\x71\x96\x7b\xc2\x85\xbf\xc8\x9c\x55\x0a\xd8\x15\x6b\xc6\x16\x83\x1a\xff\x60\xb0\x4a\x1e\x5f\x3d\xb3\x3e\xaf\x2f\x69\xa6\xc0\x1e\x03\x4b\x02\x10\x9c\xa9\x80\x2e\x24\x3e\xf0\x2d\x3a\x96\xbb\x91\x7b\xb7\x9b\x24\x6f\xd7\x6f\xaa\xe1\x25\x75\xb0\x17\x1f\x3e\x87\xce\x1f\xe1\xf8\xdf\x4f\x5f\xb0\x3e\xa2\xa6\x6d\xd8\x85\x6e\x5b\xf1\xbf\x19\xe7\x32\x27\xf0\xdf\x00\x00\x00\xff\xff\x83\x13\xa9\xa6\x49\x01\x00\x00")

func assetsRouterClusterRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterClusterRoleBindingYaml,
		"assets/router/cluster-role-binding.yaml",
	)
}

func assetsRouterClusterRoleBindingYaml() (*asset, error) {
	bytes, err := assetsRouterClusterRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/cluster-role-binding.yaml", size: 329, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x12, 0x9a, 0xeb, 0xd3, 0x79, 0x1a, 0xa6, 0x75, 0xb5, 0xda, 0x10, 0x70, 0xf9, 0x80, 0xd1, 0x51, 0x55, 0x98, 0x4d, 0x11, 0x98, 0x79, 0x5c, 0x46, 0x99, 0xa3, 0x39, 0x68, 0xe9, 0xa2, 0x72, 0x56}}
	return a, nil
}

var _assetsRouterClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x91\x31\x4f\xc3\x40\x0c\x85\xf7\xfb\x15\x56\x99\x93\x8a\x0d\x65\x65\x60\xaf\x10\xbb\x73\x71\x89\xe9\xf5\x7c\xb2\x7d\xa9\xc4\xaf\x47\x49\x5a\xa8\x40\x0c\x45\x6c\xf7\x74\x7a\xf6\xf7\x9e\xef\xe0\x31\x55\x73\x52\xb0\x28\x85\x06\x50\x49\x04\x7b\x51\x50\xa9\x4e\x6a\x2d\x3c\x8f\x6c\x60\xa3\xd4\x34\x40\x4f\x80\x06\x4a\xe6\xca\xd1\x79\x5a\x64\x11\x33\xee\x13\xb5\xe1\xc0\x79\xe8\x2e\x13\x77\x92\x28\x60\xe1\x17\x52\x63\xc9\x1d\x68\x8f\xb1\xc5\xea\xa3\x28\xbf\xa3\xb3\xe4\xf6\xf0\x60\x2d\xcb\x76\xba\x0f\x47\x72\x1c\xd0\xb1\x0b\x00\x19\x8f\xd4\x81\x14\xca\x36\xf2\xde\x1b\xce\xaf\x4a\x66\xcd\x8a\x14\xb4\x26\xb2\x2e\x34\x80\x85\x9f\x54\x6a\xb1\xd9\xd4\xc0\x66\x13\x00\xd0\x5d\xb9\xaf\x4e\xbb\x0b\xa4\x64\xeb\x20\xd7\x94\x02\xcc\xe4\x52\x35\xd2\xd9\x41\x79\x28\xc2\xd9\x6d\x51\xf3\x5a\x2b\x18\x69\x95\x46\x3a\xf1\x2a\x26\xd2\xfe\x6c\x49\x6c\xbe\x3c\x4e\xe8\x71\xfc\x09\x31\xe7\xa3\xec\x1c\xaf\x03\xde\xca\xe5\x72\xa0\xac\x34\x31\x9d\xce\x2c\xb5\x7f\xa3\xe8\x18\x23\x99\x7d\x7d\x5c\x71\x45\x25\x74\xfa\xa5\x94\x66\xbd\x66\xfb\x59\xe9\x1f\x98\x96\x09\x37\x96\xf1\xcf\xcb\xb7\xe6\xe8\xf5\x1b\x43\x2d\xc3\x1c\xfc\x23\x00\x00\xff\xff\x13\x49\xf9\x92\xc9\x02\x00\x00")

func assetsRouterClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterClusterRoleYaml,
		"assets/router/cluster-role.yaml",
	)
}

func assetsRouterClusterRoleYaml() (*asset, error) {
	bytes, err := assetsRouterClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/cluster-role.yaml", size: 713, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x17, 0x6f, 0x7f, 0x61, 0x6d, 0xdb, 0x39, 0xe1, 0x3a, 0xf9, 0xf8, 0x54, 0x21, 0x25, 0xf8, 0x6f, 0x6c, 0xd2, 0x2, 0x5, 0x16, 0xf7, 0xdd, 0x81, 0x1f, 0xde, 0xf5, 0x6, 0x66, 0xa, 0x63, 0xd}}
	return a, nil
}

var _assetsRouterDaemonsetYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x93\x41\x6f\xdb\x30\x0c\x85\xef\xfe\x15\x84\x73\x4e\xd2\xa0\xc5\xb0\xe9\x16\xa4\xc1\x50\x60\x6d\x8d\x38\xeb\xb5\x60\x65\x26\x16\x22\x4b\x02\x45\xbb\xeb\x7e\xfd\xa0\x24\x5d\xec\x20\x2b\xb6\xd3\x78\x32\xa4\xf7\x3e\x3e\x53\xe0\x08\x6e\x91\x1a\xef\x4a\x12\x78\x35\x52\x43\x45\x1b\x6c\xad\x40\x87\xb6\xa5\x98\x8d\x60\x61\xdb\x28\xc4\x70\xe7\xb6\x4c\x31\x42\x0c\xa4\xcd\xc6\xe8\xa3\x02\x90\x09\x30\x04\x6b\xa8\x02\x14\xe0\xd6\x89\x69\x68\x92\xed\x8c\xab\xd4\x89\x9e\x61\x30\x4f\xc4\xd1\x78\xa7\x92\x3e\x4e\xbb\x59\xd6\x90\x60\x85\x82\x2a\x03\x18\xc1\x03\x36\x04\x26\x42\x24\x19\x90\x00\x1c\x36\x14\x03\x6a\x52\xe0\x03\xb9\x58\x9b\x8d\x8c\xcd\x21\x50\x06\x60\xf1\x85\x6c\x4c\x10\x48\x68\x05\xec\x5b\x21\xce\x52\xd4\x74\x1a\xc9\x92\x16\xcf\x07\x45\x83\xa2\xeb\x6f\x3d\xcb\xd0\x04\x20\xd4\x04\x8b\x42\x47\x79\x2f\x63\x2a\x3b\x70\x9e\x7b\x01\xde\x9b\xee\xbf\x89\x3b\xa3\x69\xae\xb5\x6f\x9d\xa4\xff\x1b\x48\x01\x9c\xaf\xa8\x1c\xa4\x4b\x95\xa7\xe3\x31\x7b\x4b\x93\x5d\xfb\x42\xec\x48\x28\x4e\x8c\x9f\xbe\x7a\xde\x11\xe7\x0a\xf2\xfc\x28\xd6\xde\x09\x1a\x47\xdc\x4b\x34\xde\xcf\xeb\xac\x53\x2a\xd3\xe0\x96\x14\xe4\x95\xd7\x3b\xe2\x04\xfc\x3d\xcd\xa9\x67\xb3\x35\x6e\x5c\x63\x60\xff\xe3\x6d\x7c\xf0\xaa\xee\x7a\x32\x9b\x4d\xae\xf2\x73\x48\xd1\x5a\x5b\x78\x6b\xf4\x9b\x82\xbb\xcd\x83\x97\x82\x29\x92\x93\x9e\x2e\x78\x96\x5e\xa8\x53\xac\x5a\x24\xf4\x8e\x7b\xff\x50\x78\x16\x05\x9f\xaf\x06\xb7\x81\xbd\x78\xed\xad\x82\xf5\xa2\xf8\x03\x2e\x7e\xc4\xbb\xb9\xb9\xfe\x27\x60\x14\x94\x0f\x81\xb3\x2f\xd7\x9f\xfe\x8a\x38\x82\x7b\xe2\xed\xd9\x5e\x9c\xae\xc9\x75\x97\xe6\x53\xae\xe7\xeb\xf2\xb9\x78\x5c\xad\x07\x4d\xf6\xeb\xa6\x20\x4f\xdd\xf3\x0b\xb6\xd5\xe3\xf7\xf5\x72\xf5\x5c\x2e\x57\x4f\x77\x8b\xe5\xf3\xc3\xfc\x7e\x59\x16\xf3\xc5\xf2\x12\xe4\xd2\x12\xbd\x97\x35\x1d\x39\x8a\xb1\x60\xff\x42\x6a\xe0\x36\xce\x88\x41\x7b\x4b\x16\xdf\x4a\xd2\xde\x55\x51\xc1\x6c\xf8\x5c\xe9\x39\xbe\x92\x0c\x8d\x00\x01\xa5\x56\x30\xad\x09\xad\xd4\x3f\xcf\x2f\x2f\x8d\x95\x09\x2b\xf3\xff\x82\xfc\x0a\x00\x00\xff\xff\x6e\x00\x98\x99\x19\x05\x00\x00")

func assetsRouterDaemonsetYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterDaemonsetYaml,
		"assets/router/daemonset.yaml",
	)
}

func assetsRouterDaemonsetYaml() (*asset, error) {
	bytes, err := assetsRouterDaemonsetYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/daemonset.yaml", size: 1305, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xca, 0x1c, 0xfb, 0xed, 0x8d, 0xe2, 0x72, 0x23, 0x93, 0x59, 0x3e, 0xeb, 0xde, 0xb, 0xf7, 0x0, 0x6c, 0x98, 0x49, 0x4f, 0x1a, 0xff, 0x38, 0x86, 0xa7, 0xf8, 0x7f, 0x5, 0x9a, 0x8e, 0x71, 0xc}}
	return a, nil
}

var _assetsRouterNamespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xce\xbd\x6e\xc3\x30\x0c\xc4\xf1\x5d\x4f\x71\x70\x67\xf7\x63\xd5\x43\x74\xec\xce\x44\xd7\x84\x88\x4c\x0a\x26\xad\xe7\x2f\x0c\x04\xed\xd0\xf9\x7e\xc0\xfd\x1f\x6a\xad\xe2\x53\x36\xc6\x90\x2b\x8b\x0c\xfd\xe2\x1e\xea\x56\x31\x3f\xca\xc6\x94\x26\x29\xb5\x00\x26\x1b\x2b\x7c\xd0\xe2\xae\xdf\xb9\xaa\xdd\x76\x46\x14\x40\xcc\x3c\x25\xd5\x2d\x4e\x88\x3f\xf4\xaa\xfe\x66\xde\xb8\x06\x3b\xaf\xe9\x7b\xc5\xb2\x14\xa0\xcb\x85\xfd\x89\x5f\x10\x4c\x4c\xe9\x07\x91\x0e\x99\xae\x0d\x8d\x83\xd6\xd4\x6e\x70\xc3\xe3\xb8\x10\xd2\x36\x8d\x33\x0c\x79\x97\x7c\x82\x38\xe7\xdf\x37\xc8\xd0\xf8\x1f\xb0\x1f\xb6\x76\x4e\xf6\x8a\xe5\x7d\x29\x3f\x01\x00\x00\xff\xff\x55\xe9\xbf\x8f\xf3\x00\x00\x00")

func assetsRouterNamespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterNamespaceYaml,
		"assets/router/namespace.yaml",
	)
}

func assetsRouterNamespaceYaml() (*asset, error) {
	bytes, err := assetsRouterNamespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/namespace.yaml", size: 243, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa7, 0xd4, 0xa1, 0x93, 0xf1, 0x1d, 0xdc, 0xa4, 0xc, 0x91, 0xe5, 0x54, 0xec, 0xa1, 0xd2, 0xb1, 0x34, 0x19, 0x90, 0xd7, 0x34, 0xdc, 0xce, 0xea, 0x67, 0xc7, 0x8a, 0x6c, 0xe6, 0x4b, 0xd1, 0x92}}
	return a, nil
}

var _assetsRouterServiceAccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xce\xb1\x4e\xc4\x30\x10\x84\xe1\xde\x4f\x31\xd2\xd5\x9c\x44\xeb\x8e\x92\x16\x24\x7a\xb3\x99\xbb\x5b\x91\x78\xcd\xee\x3a\x88\xb7\x47\x41\x29\xa7\x98\x5f\xdf\x05\x2f\x22\x36\x7b\xe2\x66\x0e\xb7\x99\xf4\x80\x38\x5b\x72\xc1\xe7\x2f\xf2\x41\xd8\xa0\xb7\x34\xbf\xe2\x35\xf1\xa3\xeb\x0a\xe7\xf7\x54\x27\x64\x9d\x91\x74\x84\xd8\xe0\x52\x2e\x18\xf4\x4d\x23\xd4\x7a\xc0\xb9\xfe\x57\xd2\xf0\x76\x84\x31\xdc\x84\x11\xda\xef\xd7\xf2\xa5\x7d\xa9\x78\xa7\xef\x2a\x3c\x0d\xa5\x0d\xfd\xa0\x1f\xef\x8a\xfd\xb9\x6c\xcc\xb6\xb4\x6c\xb5\x00\xbd\x6d\xac\x27\xf0\x9c\x31\x9a\xb0\x1e\xba\x1e\x0f\xbd\xe5\x93\xf6\xbb\x33\xa2\xfc\x05\x00\x00\xff\xff\x33\xdc\xda\x8c\xd5\x00\x00\x00")

func assetsRouterServiceAccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterServiceAccountYaml,
		"assets/router/service-account.yaml",
	)
}

func assetsRouterServiceAccountYaml() (*asset, error) {
	bytes, err := assetsRouterServiceAccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/service-account.yaml", size: 213, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd0, 0xe3, 0x6, 0x3a, 0x88, 0x2e, 0x33, 0xe3, 0x24, 0xf0, 0xf0, 0xe9, 0x43, 0xc8, 0x46, 0x6c, 0x60, 0x9, 0x69, 0x84, 0x3, 0xd8, 0xc3, 0x80, 0xb, 0xab, 0x37, 0x13, 0xce, 0xf2, 0xeb, 0x60}}
	return a, nil
}

var _assetsRouterServiceCloudYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x31\x8b\x1c\x31\x0c\x85\xfb\xf9\x15\x0f\xb6\xbe\x23\xe9\xc2\x94\x77\x55\xe0\x08\x0b\x59\xd2\xeb\x3c\x9a\xb5\x39\x8f\x64\x24\xcd\x26\xfb\xef\x83\x3d\xb7\x45\x48\xe9\x87\x25\xbd\xef\x3b\xe1\x4d\x69\xc1\x0b\x55\x92\xc4\x86\x9f\x6c\xb7\x92\x18\xa1\x68\x95\x12\xa3\x08\x56\x53\x09\xe8\x8a\xc8\x0c\xd3\x3d\xd8\x7a\x9c\xaa\xee\x0b\x58\x6e\xc5\x54\x36\x96\xf0\xe7\xe9\x84\xd7\xba\x7b\xff\xf0\x5d\xae\xc6\xee\xf0\xc6\xa9\xac\x25\xe1\x46\x75\x67\x07\x19\x83\x5a\xab\x85\x17\x50\xc0\x76\x89\xb2\xf1\xf3\xf4\x51\x64\x99\x1f\xe7\x27\x6a\xe5\x17\x9b\x17\x95\x19\xb7\xaf\xd3\xc6\x41\x0b\x05\xcd\x13\x70\xc2\x0f\xda\x18\xc5\xe1\x1c\xff\xac\x00\x84\x36\xf6\x46\x89\x67\x68\x63\xf1\x5c\xd6\x78\x2a\x47\x93\x09\xa8\xf4\xce\xd5\xfb\x12\xf4\x0e\xf3\x27\xcc\xd4\x3b\xf6\x34\xee\x8d\xe7\x21\xe4\xe1\x63\x02\x9c\x2b\xa7\x50\xfb\x7f\xac\x77\xb9\xe4\xe2\xa0\xea\x8a\x4c\x3e\x04\xf1\xba\x72\x1a\xba\x36\xb2\x8f\x22\x57\xbc\xbd\xa0\xa9\x56\x04\xd9\x95\xc3\x41\x8e\x5d\x32\x53\x8d\x7c\xc7\xef\xcc\x02\xd1\xb1\xec\xd3\x6d\xd3\xe5\xf0\xd4\x8c\x9d\xbb\x7a\x01\x41\x74\x61\xbc\x73\x2e\xb2\x8c\x3b\x7e\xa8\xea\xd8\xfc\x27\xd8\x84\xea\xc5\x68\x5d\x4b\x3a\x6b\x2d\xe9\xde\x41\x12\xd5\x09\x68\x6a\x31\xa8\x9f\x86\xa0\x19\x39\xa2\x0d\x9a\x66\x1a\x9a\xb4\xce\xb8\xbc\x9e\x8f\x44\x2d\x66\x7c\xfb\x32\x1e\x47\xe1\xf3\x88\xc6\xcc\xdf\x00\x00\x00\xff\xff\x4c\x7a\xce\x39\x2e\x02\x00\x00")

func assetsRouterServiceCloudYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterServiceCloudYaml,
		"assets/router/service-cloud.yaml",
	)
}

func assetsRouterServiceCloudYaml() (*asset, error) {
	bytes, err := assetsRouterServiceCloudYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/service-cloud.yaml", size: 558, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x37, 0xe4, 0x7b, 0xa2, 0xe9, 0xa, 0x45, 0xf7, 0xd9, 0x9, 0xa3, 0xca, 0xf3, 0x7f, 0xc0, 0x31, 0x9a, 0x16, 0x8c, 0x14, 0xd6, 0x3c, 0x4b, 0x7e, 0x27, 0xcc, 0x44, 0xd3, 0x56, 0x7f, 0xb2, 0x96}}
	return a, nil
}

var _manifests00ClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x52\xb1\x6e\xdb\x40\x0c\xdd\xf5\x15\x07\x67\x2b\x20\x19\xdd\x0a\xad\x1d\x3a\x75\xe9\xd0\x9d\x3e\x3d\xd9\xac\xa5\xa3\x40\xf2\x9c\xb6\x5f\x5f\x9c\x2c\xa7\x88\x6c\x27\x29\x82\x4e\x3a\x52\xbc\xc7\x77\xef\xbd\x87\xf0\x79\xc8\xe6\xd0\xa0\x32\x20\xf4\xa2\xc1\x0f\x08\x32\x41\xc9\x45\x03\xbb\x61\xe8\x9b\xea\xc8\xa9\x6b\x2f\xb3\xdf\x64\x40\x45\x13\x7f\x87\x1a\x4b\x6a\x83\xee\x28\x36\x94\xfd\x20\xca\xbf\xc9\x59\x52\x73\xfc\x64\x0d\xcb\xf6\xf4\xb1\x1a\xe1\xd4\x91\x53\x5b\x85\x90\x68\x44\x5b\xd0\x93\x1d\xb8\xf7\x9a\xd3\x5e\x61\x56\x5f\xf6\x55\x9a\x07\x58\x5b\xd5\x81\x26\xfe\xa2\x92\x27\x2b\xd7\xea\xb0\xd9\x54\x21\x28\x4c\xb2\x46\x2c\xbd\x28\xa9\xe7\xfd\x48\x93\xcd\x65\xc1\xb6\x89\x22\xce\xa5\x41\x4f\x1c\x41\x31\x4a\x4e\xfe\xac\x57\x8a\x13\x74\x77\xc1\x51\x90\x63\x3e\xee\xe1\xf3\x77\x60\x3b\x1f\x1e\xc9\xe3\x61\x3e\x75\x18\xe0\xa8\xae\xa9\xd1\xb4\x10\xc0\x4f\x47\x2a\x82\xd8\x35\xd7\x8e\x30\x4a\x32\xf8\x6a\xf7\xe6\xc3\xe6\x06\xe4\x5d\x3d\x6f\x88\x70\xb6\xa4\xb8\x67\xeb\xc6\x8e\x53\xc7\x69\x7f\xff\xb9\xab\x67\x5e\x13\x59\xfc\x69\x9e\x1c\x7b\x89\xc3\x32\xbc\x96\xf7\xd5\x25\x17\xf3\xcd\xc9\xf3\x1b\x77\x3d\xdd\x79\xd5\xca\x3c\x75\xa5\x55\x3d\x84\xaf\xac\x2a\x8a\x2e\xf4\x2a\x63\x20\x2b\x6e\x6c\x55\xb2\x43\xb7\x0b\x6c\x5d\x64\x6b\x7e\xd1\x38\xbc\x2d\x82\x48\xdd\x24\x7c\x23\x5e\xab\x38\xde\x97\xe3\xdd\xb4\x4a\x4c\x90\x9c\xe3\xcb\x39\x71\x39\x22\x29\x4e\x8c\xc7\x85\x6c\xde\xfd\x40\x74\x8a\x11\x66\x7f\x7f\x5c\x8b\xf9\x6e\x86\xf3\xe4\xda\xd6\xdb\x7a\xce\xa3\xff\x59\xb0\x7f\xa6\xb3\x3d\x07\xf3\x39\xab\x25\x56\x7f\x02\x00\x00\xff\xff\xa0\x04\x8c\x0b\x40\x05\x00\x00")

func manifests00ClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests00ClusterRoleYaml,
		"manifests/00-cluster-role.yaml",
	)
}

func manifests00ClusterRoleYaml() (*asset, error) {
	bytes, err := manifests00ClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/00-cluster-role.yaml", size: 1344, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xef, 0xc2, 0x35, 0xc7, 0xc5, 0x5, 0xe6, 0x8a, 0xa2, 0x85, 0xec, 0xde, 0x2, 0x4b, 0xfd, 0xd7, 0x9, 0xa0, 0x66, 0x8f, 0xac, 0x6c, 0x1c, 0xd0, 0x8c, 0xaa, 0xd3, 0x74, 0xd9, 0xf4, 0x2a, 0xdb}}
	return a, nil
}

var _manifests00CustomResourceDefinitionYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xb1\x4e\xc4\x30\x0c\x86\xf7\x3c\x85\x9f\x20\xa8\x1b\xca\x0a\x0b\x02\x31\x30\xb0\x9b\x9c\xaf\x67\x5d\x6a\x5b\xb1\x53\xf1\xf8\xa8\xed\xb1\xc0\x6d\xb6\xbe\xcf\xbf\x7e\x19\x8d\x3f\xa9\x3b\xab\x14\x40\x63\xfa\x0e\x92\x6d\xf3\x7c\x7d\xf4\xcc\xfa\xb0\x4e\x5f\x14\x38\xa5\x2b\xcb\xa9\xc0\xd3\xf0\xd0\xe5\x83\x5c\x47\xaf\xf4\x4c\x67\x16\x0e\x56\x49\x0b\x05\x9e\x30\xb0\x24\x00\xc1\x85\x0a\xd4\x36\x3c\xa8\xb3\xcc\x9d\xdc\xc9\xf3\x6d\xca\x6a\x24\x7e\xe1\x73\x64\xd6\xe4\x46\x75\xbb\x99\xbb\x0e\x2b\x70\xd7\x39\x12\x7d\xd3\x00\x6e\x3d\x8e\xf0\x97\x43\xdf\x41\x63\x8f\xd7\x3b\xf0\x8d\x3d\x76\xc1\xda\xe8\xd8\xfe\x17\xdb\xa1\xb3\xcc\xa3\x61\xff\x8b\x13\x80\x57\x35\x2a\xf0\xbe\x75\x30\xac\x74\x4a\x00\xeb\xef\xcf\xd6\x09\x9b\x5d\x70\x4a\x3f\x01\x00\x00\xff\xff\xf9\xe0\x67\x28\x49\x01\x00\x00")

func manifests00CustomResourceDefinitionYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests00CustomResourceDefinitionYaml,
		"manifests/00-custom-resource-definition.yaml",
	)
}

func manifests00CustomResourceDefinitionYaml() (*asset, error) {
	bytes, err := manifests00CustomResourceDefinitionYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/00-custom-resource-definition.yaml", size: 329, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1a, 0x6e, 0xd2, 0x87, 0xd2, 0x60, 0x16, 0x1d, 0x63, 0xc7, 0xb9, 0xe8, 0x7e, 0x8, 0xf1, 0x5a, 0xb, 0x68, 0xba, 0x7d, 0x7b, 0x5, 0x9e, 0xa3, 0x23, 0x40, 0x82, 0x43, 0x30, 0xa2, 0x67, 0x6b}}
	return a, nil
}

var _manifests00NamespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8d\x3b\x6e\x03\x31\x0c\x44\x7b\x9d\x62\xe0\xd4\x9b\x4f\xab\x43\xa4\x4c\x4f\x47\x13\x9b\xb0\x96\x14\x44\xae\xce\x1f\x6c\x10\xb8\x9d\x79\x78\xef\xa1\xd6\x2a\x3e\x65\x67\x0c\xf9\x66\x91\xa1\x5f\x9c\xa1\x6e\x15\xeb\xa3\xec\x4c\x69\x92\x52\x0b\x60\xb2\xb3\xc2\x07\x2d\xee\xfa\x93\x9b\xda\x6d\x32\x62\xf3\xc1\x29\xe9\xb3\x00\x5d\xae\xec\x71\xc2\xc0\x0b\x82\x89\x25\xfd\x20\xd2\x21\xcb\xb5\xa1\x71\xd0\x9a\xda\x0d\x6e\x78\x1c\x57\x42\xda\xae\x71\xf6\x90\x77\xc9\x7f\x20\xce\xfb\x59\x82\x0c\x8d\x3f\xe7\x73\x7a\x55\x7f\x9b\x87\x6d\x9d\x8b\xbd\xe2\xf2\x7e\x29\xbf\x01\x00\x00\xff\xff\xb1\xc8\x1a\xc1\xca\x00\x00\x00")

func manifests00NamespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests00NamespaceYaml,
		"manifests/00-namespace.yaml",
	)
}

func manifests00NamespaceYaml() (*asset, error) {
	bytes, err := manifests00NamespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/00-namespace.yaml", size: 202, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdc, 0x97, 0x40, 0xc0, 0x79, 0x93, 0xfe, 0xb2, 0xf8, 0x52, 0xe3, 0x99, 0xb4, 0xdf, 0xea, 0x49, 0x21, 0x22, 0x15, 0x3d, 0x8f, 0x47, 0x72, 0x36, 0x4c, 0x22, 0x13, 0xbe, 0xe3, 0x37, 0xc, 0xcc}}
	return a, nil
}

var _manifests01ClusterRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\x31\x4f\x03\x31\x0c\x85\xf7\xfc\x0a\x4b\xcc\x17\xc4\x86\xb2\x01\x03\x7b\x91\xd8\xdd\x9c\xdb\x33\xbd\xda\x91\xed\x74\xe0\xd7\xa3\xe8\x0a\x4b\xa5\x8a\xd9\x7e\xef\x7d\xdf\x03\xbc\xb2\xcc\x0e\xb1\x10\x68\x23\xc3\x50\x83\xba\x76\x0f\x32\x30\x5d\x09\x42\x81\xc3\xe1\x83\xec\xc2\x95\xe0\xa5\x56\xed\x12\x39\x9d\x58\xe6\x02\x6f\xdb\xeb\x4e\x57\x1a\x45\x2c\xc7\x84\x8d\x3f\xc9\x9c\x55\x0a\xd8\x1e\x6b\xc6\x1e\x8b\x1a\x7f\x63\xb0\x4a\x3e\x3d\x7b\x66\x7d\xbc\x3c\xa5\x33\x05\xce\x18\x58\x12\x80\xe0\x99\xca\x20\x10\x5f\xf8\x10\x13\xcb\xd1\xc8\x7d\xfa\x65\x4a\xde\xf7\x5f\x54\xc3\x4b\x9a\x60\x9b\xbe\x12\x5d\x81\xfe\x3a\x6e\x92\xdb\xc1\x1b\xd6\xfb\x0b\xc3\x76\x47\x87\x41\x73\xe3\x96\x00\xb0\xf1\xbb\x69\x6f\x77\xa4\xfe\xe3\xf1\x13\x00\x00\xff\xff\x5e\x3a\x23\xb1\x71\x01\x00\x00")

func manifests01ClusterRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests01ClusterRoleBindingYaml,
		"manifests/01-cluster-role-binding.yaml",
	)
}

func manifests01ClusterRoleBindingYaml() (*asset, error) {
	bytes, err := manifests01ClusterRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/01-cluster-role-binding.yaml", size: 369, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xda, 0x8e, 0x10, 0x4b, 0xec, 0x40, 0x80, 0x5c, 0x10, 0x83, 0xa9, 0x57, 0x2, 0x49, 0x9d, 0x4e, 0x4d, 0x6a, 0xec, 0xaf, 0x5d, 0x81, 0xa3, 0x2f, 0x1e, 0xd3, 0x8b, 0x69, 0xa0, 0x39, 0x50, 0xdf}}
	return a, nil
}

var _manifests01RoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\xd0\x31\x4f\xc3\x40\x0c\x05\xe0\xfd\x7e\xc5\x93\x98\x13\xc4\x86\x6e\x83\x85\xbd\x48\xec\xee\xc5\x6d\x4c\x5b\xfb\x64\x3b\x1d\xf8\xf5\x28\x22\x88\x01\xc1\xd2\xd9\xb6\xde\xf7\x7c\x87\x67\xd1\x29\x90\x33\xc3\x3a\x3b\xa5\x39\xdc\xce\x8c\x34\x48\x06\x5e\xd9\xaf\xd2\x18\x4f\xad\xd9\xa2\x39\x96\x93\xe8\x54\xb1\xb3\x33\xaf\x97\xa2\xc7\x42\x5d\xde\xd8\x43\x4c\x2b\x7c\x4f\x6d\xa4\x25\x67\x73\xf9\xa0\x14\xd3\xf1\xf4\x18\xa3\xd8\xfd\xf5\xa1\x5c\x38\x69\xa2\xa4\x5a\x00\xa5\x0b\x57\x88\x1e\x9d\x23\x86\xef\xe8\x6d\x10\x9d\x1a\xd7\x15\xa4\x31\xcb\x21\x87\x5f\x7b\xb1\xec\xdf\xb9\x65\xd4\x32\xe0\x4b\xb4\x41\x37\xe7\xed\x09\xeb\x13\x76\x7c\x58\xad\x3f\x95\x0b\x40\x5d\x5e\xdc\x96\xfe\x4f\xd7\xbf\xc3\x3f\x03\x00\x00\xff\xff\x1f\x8f\x27\xc8\x6f\x01\x00\x00")

func manifests01RoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests01RoleBindingYaml,
		"manifests/01-role-binding.yaml",
	)
}

func manifests01RoleBindingYaml() (*asset, error) {
	bytes, err := manifests01RoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/01-role-binding.yaml", size: 367, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xce, 0x6b, 0xe2, 0x98, 0x77, 0x85, 0x4, 0x5f, 0x81, 0xee, 0xa8, 0x60, 0xbe, 0x8a, 0xf3, 0x3, 0xad, 0xd8, 0x7, 0x27, 0x33, 0x11, 0xe8, 0x28, 0x66, 0xe4, 0xd9, 0x9, 0x76, 0xee, 0x60, 0xb5}}
	return a, nil
}

var _manifests01RoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xc1\x4e\xc3\x30\x10\x44\xef\xfe\x8a\x55\xb8\x21\x25\x88\x1b\xca\x0f\x70\xe7\xc0\x7d\xeb\x6c\xda\x55\x6d\xaf\xb5\xbb\x8e\x04\x5f\x8f\x9a\x26\x15\x50\x24\x6e\x1e\xcf\xcc\xf3\xc8\x0f\xf0\x26\x89\x60\x16\x05\x3f\x11\x48\x25\x45\x17\x05\x76\xa3\x34\x0f\xe1\xcc\x65\x1a\xd7\x4c\xc0\xca\xef\xa4\xc6\x52\x46\xd0\x03\xc6\x01\x9b\x9f\x44\xf9\x13\x9d\xa5\x0c\xe7\x17\x1b\x58\x9e\x96\xe7\x90\xc9\x71\x42\xc7\x31\x00\x14\xcc\x34\x02\x97\xa3\x92\x59\xbf\xe3\x37\xc3\x2a\x46\x1a\x2f\x8f\x16\x3b\xf1\xec\xfd\x5d\x4e\x5b\x22\x1b\x43\x0f\x58\xf9\x55\xa5\x55\xbb\x40\xfb\x1d\x38\xdc\xaa\x03\x4b\x00\x50\x32\x69\x1a\x69\x4b\x75\x8f\x5d\x00\x58\x48\x0f\xdf\x2e\xee\x58\x5d\x77\xdf\xac\x32\xd9\x7a\x30\xd2\x85\x23\x5d\x05\x95\xa9\x0a\x17\xbf\xaa\x7a\xf9\x0c\x73\x2a\xbe\x48\x6a\x99\x62\x42\xce\x5b\x70\xa1\x3d\x15\xa5\xcc\x7c\xcc\x58\x77\x5e\x54\x5a\xad\xff\x66\x61\x5d\x2b\xbf\x86\x4d\x54\x93\x7c\xe4\x1b\xfe\xc7\xbe\x09\x29\x4b\x31\xda\x3c\xa5\x9a\x38\xe2\x4d\x9b\xa3\xd3\xdc\x92\xfd\x39\xe0\x2b\x00\x00\xff\xff\x78\x51\x95\xad\x0a\x02\x00\x00")

func manifests01RoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests01RoleYaml,
		"manifests/01-role.yaml",
	)
}

func manifests01RoleYaml() (*asset, error) {
	bytes, err := manifests01RoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/01-role.yaml", size: 522, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xaa, 0xd, 0xd1, 0x4a, 0xe0, 0xb7, 0x77, 0x47, 0x8e, 0xd7, 0xb9, 0xbb, 0xf2, 0x1a, 0xef, 0x50, 0x13, 0xb2, 0xda, 0xc3, 0x1f, 0x71, 0xe9, 0xcb, 0x12, 0x89, 0xb4, 0x34, 0x4e, 0xd1, 0xc5, 0x89}}
	return a, nil
}

var _manifests01ServiceAccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\xb1\x6e\x84\x30\x10\x44\x7b\x7f\xc5\x48\xd4\x20\xa5\x75\x97\x32\x75\xa4\xf4\x96\x3d\x84\xd5\x81\xed\xdb\x5d\xf8\xfe\x13\x88\xab\xae\x9e\xa7\x37\x6f\xc0\x77\xce\x6d\xaf\x8e\xb9\x29\x7c\x21\x5a\xa7\x26\x6f\x0a\x71\xe3\x3a\x4f\xf8\x71\xd8\xd2\xf6\xb5\x40\xf9\xdc\x45\x89\x9a\x36\x5a\x4f\x99\xb0\xdc\x3a\x4b\x18\xd0\xa9\x9b\x98\x49\xab\x36\x85\x87\xd4\x12\xf1\x4b\x3d\x24\xf3\xf6\x87\xd4\xe5\x8f\x7a\x12\x11\xc7\x57\xd8\xe8\xa9\x24\x4f\x31\xe0\xf2\x45\x48\xfd\x57\x9a\x8d\xef\x80\x7b\xb8\x8e\xe2\x99\x55\x6d\x91\xd9\xc7\x0f\xee\x15\x00\x00\xff\xff\xe5\x09\x18\x74\xc4\x00\x00\x00")

func manifests01ServiceAccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests01ServiceAccountYaml,
		"manifests/01-service-account.yaml",
	)
}

func manifests01ServiceAccountYaml() (*asset, error) {
	bytes, err := manifests01ServiceAccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/01-service-account.yaml", size: 196, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2c, 0xae, 0x8d, 0xe1, 0x55, 0xc4, 0xdf, 0x60, 0x69, 0xa, 0xef, 0xf1, 0x8c, 0x61, 0xea, 0x45, 0xf4, 0xa, 0xcb, 0x9d, 0xc7, 0xc3, 0xb4, 0x10, 0x8a, 0xb6, 0xf3, 0x21, 0xe6, 0x97, 0xc0, 0x28}}
	return a, nil
}

var _manifests02DeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\xcb\x6e\xdb\x40\x0c\x45\xf7\xfa\x0a\xfe\x80\x6a\x79\xd3\xc5\xec\x04\xd7\x45\x17\xad\x2d\xb8\x46\xb2\x0c\x98\x11\x6d\x0f\x32\x2f\x90\xb4\x80\xfc\x7d\xa0\xf8\x81\xf1\x93\x4b\x5d\xf2\xde\x43\x71\x30\xbb\x17\x62\x71\x29\x1a\xc0\x9c\x65\x32\x4c\xab\x0f\x17\x7b\x03\xbf\x28\xfb\xf4\x19\x28\x6a\x15\x48\xb1\x47\x45\x53\x01\x44\x0c\x64\xc0\xc5\x2d\x93\x48\x9d\x32\x31\x6a\xe2\xa3\x20\x19\x2d\x19\x48\x99\xa2\xec\xdc\x46\xeb\x9b\x3e\xc9\x64\x47\x1b\xa6\xec\x9d\x45\x31\x30\xad\x00\x84\x3c\x59\x4d\x3c\x2a\x00\x01\xd5\xee\xfe\xe2\x3b\x79\x39\x7c\x78\x92\xaa\x14\xb2\x47\xa5\xe3\x64\x01\x3a\x96\xbf\x30\x79\x62\x03\x70\x02\x1b\xcb\xa6\xa8\xe8\x22\x71\x31\x5a\x3f\x1b\x3e\x94\x0b\xb8\x2d\xb7\x9f\x24\x76\x5b\x17\x6b\xeb\xf7\xa2\xc4\x37\x3f\xc3\x8c\xe0\xa2\x85\x43\x4e\xac\x45\xe6\x98\x7a\x66\xe9\x12\xab\x81\x9f\x4d\xd3\x34\x45\xc3\x69\xa7\x40\xca\xce\x4a\xa1\xd8\x14\x02\xc6\xfe\xca\xed\x01\x4a\xd1\x44\x71\x30\x17\x01\xa7\xcd\x5f\xdb\xf5\xec\xcf\xdb\xa2\xfd\x37\xff\xdf\xb5\xb3\xf9\x45\x0f\xc0\x80\x7e\x4f\xbf\x39\x05\x73\x25\x00\x6c\x1c\xf9\x7e\x45\x9b\x5b\xe5\xa8\x75\xa8\x3b\x73\x3e\xde\x8f\xf3\x4b\xba\x8b\xb1\xec\xe6\xab\x76\xbd\x5c\x7d\x93\xdc\x83\x78\x78\x23\x21\x1e\x9c\xa5\xd6\xda\xb4\x8f\xba\xb8\x7f\xce\xaf\x00\x00\x00\xff\xff\x32\x48\x2c\xcb\x11\x03\x00\x00")

func manifests02DeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests02DeploymentYaml,
		"manifests/02-deployment.yaml",
	)
}

func manifests02DeploymentYaml() (*asset, error) {
	bytes, err := manifests02DeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/02-deployment.yaml", size: 785, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x39, 0xfd, 0x7a, 0x30, 0x1c, 0xee, 0xf8, 0xa, 0x91, 0xc3, 0x90, 0x40, 0x7, 0x2e, 0xf7, 0xcf, 0x49, 0x3f, 0x24, 0x2, 0x80, 0x3e, 0x3, 0x88, 0xab, 0xa5, 0x5e, 0xb0, 0xc, 0x70, 0x2f, 0x23}}
	return a, nil
}

var _manifestsImageReferences = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8d\xb1\xca\xc3\x30\x0c\x84\x77\x3f\x85\xf0\xee\x84\x7f\xf5\xfc\x2f\x9d\x0b\xdd\x85\xab\xb8\x22\xb1\x65\x24\xb5\xcf\x5f\x92\x94\x6e\x9d\xee\xb8\x83\xef\x5b\xb9\xdf\x33\x5c\x1a\x56\xba\xba\x12\xb6\x80\x83\x6f\xa4\xc6\xd2\x33\xf0\xbe\x4f\x32\xa8\xdb\x83\x17\x9f\x58\xe6\xd7\x5f\xb0\x41\x25\x07\x00\xc7\x6a\x7b\x26\xe8\xd8\x28\x43\xd9\x9e\xe6\xa4\x89\x7b\x55\x32\x4b\x32\x48\xd1\x45\x03\x00\xc0\xa2\xd2\x32\x1c\x15\xe0\xb4\xc6\x7f\x29\x2b\xe9\x21\x8f\x9f\xe7\x24\xc5\xaf\x72\x16\xe5\xca\x3d\xfd\x62\xe7\x0d\x9d\xcc\x63\x78\x07\x00\x00\xff\xff\x89\xea\xe4\x72\xc9\x00\x00\x00")

func manifestsImageReferencesBytes() ([]byte, error) {
	return bindataRead(
		_manifestsImageReferences,
		"manifests/image-references",
	)
}

func manifestsImageReferences() (*asset, error) {
	bytes, err := manifestsImageReferencesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/image-references", size: 201, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x33, 0x27, 0x40, 0xae, 0x19, 0x1b, 0x1d, 0x56, 0x90, 0x4, 0x7f, 0xab, 0x9e, 0x8d, 0xdb, 0xa2, 0x8a, 0xf1, 0xb, 0x79, 0xb2, 0xee, 0x88, 0x73, 0x69, 0x42, 0x27, 0x40, 0x94, 0x63, 0x77, 0xe4}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/defaults/cluster-ingress.yaml": assetsDefaultsClusterIngressYaml,

	"assets/router/cluster-role-binding.yaml": assetsRouterClusterRoleBindingYaml,

	"assets/router/cluster-role.yaml": assetsRouterClusterRoleYaml,

	"assets/router/daemonset.yaml": assetsRouterDaemonsetYaml,

	"assets/router/namespace.yaml": assetsRouterNamespaceYaml,

	"assets/router/service-account.yaml": assetsRouterServiceAccountYaml,

	"assets/router/service-cloud.yaml": assetsRouterServiceCloudYaml,

	"manifests/00-cluster-role.yaml": manifests00ClusterRoleYaml,

	"manifests/00-custom-resource-definition.yaml": manifests00CustomResourceDefinitionYaml,

	"manifests/00-namespace.yaml": manifests00NamespaceYaml,

	"manifests/01-cluster-role-binding.yaml": manifests01ClusterRoleBindingYaml,

	"manifests/01-role-binding.yaml": manifests01RoleBindingYaml,

	"manifests/01-role.yaml": manifests01RoleYaml,

	"manifests/01-service-account.yaml": manifests01ServiceAccountYaml,

	"manifests/02-deployment.yaml": manifests02DeploymentYaml,

	"manifests/image-references": manifestsImageReferences,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": {nil, map[string]*bintree{
		"defaults": {nil, map[string]*bintree{
			"cluster-ingress.yaml": {assetsDefaultsClusterIngressYaml, map[string]*bintree{}},
		}},
		"router": {nil, map[string]*bintree{
			"cluster-role-binding.yaml": {assetsRouterClusterRoleBindingYaml, map[string]*bintree{}},
			"cluster-role.yaml":         {assetsRouterClusterRoleYaml, map[string]*bintree{}},
			"daemonset.yaml":            {assetsRouterDaemonsetYaml, map[string]*bintree{}},
			"namespace.yaml":            {assetsRouterNamespaceYaml, map[string]*bintree{}},
			"service-account.yaml":      {assetsRouterServiceAccountYaml, map[string]*bintree{}},
			"service-cloud.yaml":        {assetsRouterServiceCloudYaml, map[string]*bintree{}},
		}},
	}},
	"manifests": {nil, map[string]*bintree{
		"00-cluster-role.yaml":               {manifests00ClusterRoleYaml, map[string]*bintree{}},
		"00-custom-resource-definition.yaml": {manifests00CustomResourceDefinitionYaml, map[string]*bintree{}},
		"00-namespace.yaml":                  {manifests00NamespaceYaml, map[string]*bintree{}},
		"01-cluster-role-binding.yaml":       {manifests01ClusterRoleBindingYaml, map[string]*bintree{}},
		"01-role-binding.yaml":               {manifests01RoleBindingYaml, map[string]*bintree{}},
		"01-role.yaml":                       {manifests01RoleYaml, map[string]*bintree{}},
		"01-service-account.yaml":            {manifests01ServiceAccountYaml, map[string]*bintree{}},
		"02-deployment.yaml":                 {manifests02DeploymentYaml, map[string]*bintree{}},
		"image-references":                   {manifestsImageReferences, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
