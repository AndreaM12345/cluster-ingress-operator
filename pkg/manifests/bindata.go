// Code generated by go-bindata.
// sources:
// assets/router/cluster-role-binding.yaml
// assets/router/cluster-role.yaml
// assets/router/daemonset.yaml
// assets/router/service-account.yaml
// assets/router/service-cloud.yaml
// DO NOT EDIT!

package manifests

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsRouterClusterRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\x31\x4f\xc4\x30\x0c\x46\xf7\xfc\x0a\xeb\x98\x5b\xc4\x86\xb2\x01\x3b\xc3\x21\xb1\xfb\x52\xdf\xd5\x5c\x1b\x57\xb6\x53\x09\x7e\x3d\x8a\x12\x31\xc0\xc0\xed\xcf\xdf\x7b\xbe\x83\x67\xce\x93\x81\xcf\x04\x2a\xc5\x49\x41\x65\x21\x70\x01\x76\x83\x37\xd2\x9d\x13\xc1\x53\x4a\x52\xb2\x8f\xe1\xca\x79\x8a\xf0\xb2\x14\x73\xd2\xa3\x2c\x54\xcf\x39\x5f\x02\x6e\xfc\x4e\x6a\x2c\x39\x82\x9e\x30\x8d\x58\x7c\x16\xe5\x2f\x74\x96\x3c\x5e\x1f\x6d\x64\xb9\xdf\x1f\xc2\x4a\x8e\x13\x3a\xc6\x00\x90\x71\xa5\x08\xa9\xad\x0d\x9c\x2f\x4a\x66\x83\x6c\xa4\xe8\xa2\xb1\x05\x05\x2b\xa7\x0f\x4a\x6e\x31\x0c\xd0\xfc\x3d\xab\x57\xfd\x0c\x75\xbe\x3e\x70\xa4\x73\x15\xfc\xc9\xbd\x59\xda\x38\xdb\x30\x51\x04\xd9\x28\xdb\xcc\x67\x1f\x7e\x9f\x75\xba\x18\xe9\x6b\xe5\x6b\xe3\xc1\x3e\xcd\x69\x8d\xd6\x2a\xb1\x55\xc6\xff\x46\xba\xf9\x10\xbe\x03\x00\x00\xff\xff\xd1\x7c\x0e\xe1\x94\x01\x00\x00")

func assetsRouterClusterRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterClusterRoleBindingYaml,
		"assets/router/cluster-role-binding.yaml",
	)
}

func assetsRouterClusterRoleBindingYaml() (*asset, error) {
	bytes, err := assetsRouterClusterRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/cluster-role-binding.yaml", size: 404, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsRouterClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x31\x8b\x23\x31\x0c\x85\x7b\xff\x0a\x91\xab\x67\xc2\x75\x87\xdb\x2b\xae\x0f\xc7\xf6\x1a\x8f\xb2\xa3\x8d\x63\x19\x49\x9e\xc0\xfe\xfa\x65\x26\x09\x2c\x61\x9b\x09\xe9\x6c\x83\xde\xf7\xde\x93\x7f\xc1\xdf\xdc\xcc\x49\xc1\x92\x54\x1a\x41\x25\x13\x1c\x45\x41\xa5\x39\xa9\xf5\xf0\x7f\x62\x03\x9b\xa4\xe5\x11\x06\x02\x34\x50\x32\x57\x4e\xce\xf3\x7a\xad\x62\xc6\x43\xa6\x3e\x9c\xb8\x8c\xf1\xae\x78\x90\x4c\x01\x2b\xbf\x91\x1a\x4b\x89\xa0\x03\xa6\x1e\x9b\x4f\xa2\xfc\x89\xce\x52\xfa\xd3\x1f\xeb\x59\xf6\xf3\xef\x70\x26\xc7\x11\x1d\x63\x00\x28\x78\xa6\x08\xe9\x2a\xd3\x71\x79\x57\x32\xeb\xa4\x92\xa2\x8b\xc6\xab\xb3\xa0\x2d\x93\xc5\xd0\x01\x56\xfe\xa7\xd2\xaa\x2d\xb3\x1d\xec\x76\x01\x00\xdd\x95\x87\xe6\x74\xb8\x7b\x95\x62\x11\x4a\xcb\x39\xc0\x12\x40\x9a\x26\xba\x4d\x50\x19\xab\x70\x71\x0b\x00\x33\xe9\x70\x7b\xce\x6c\xbe\x1e\x2e\xe8\x69\x7a\x05\xc8\x48\x67\x4e\xb4\x91\xb3\x54\x46\xc5\x39\x7d\xef\x6c\x2b\xda\xe5\x44\x45\x69\x66\xba\x3c\xe0\x93\x12\x3a\xfd\x8c\x7d\xdc\xd4\xe6\xc0\x6d\xf8\xa0\xe4\x98\x12\x99\x6d\xa2\xaf\xe5\x76\xd7\x5f\xd8\x4b\xa5\x62\x13\x1f\xfd\x09\x0b\xab\xc2\x33\x9b\x7d\x1d\x7c\x6f\x8e\xde\x1e\x3c\xb4\x3a\x2e\xc1\xbf\x02\x00\x00\xff\xff\x31\x01\xa5\x06\x81\x03\x00\x00")

func assetsRouterClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterClusterRoleYaml,
		"assets/router/cluster-role.yaml",
	)
}

func assetsRouterClusterRoleYaml() (*asset, error) {
	bytes, err := assetsRouterClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/cluster-role.yaml", size: 897, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsRouterDaemonsetYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x90\x41\x6f\x13\x41\x0c\x85\xef\xf9\x15\xd6\xde\x93\x74\x95\x0a\xc1\xdc\x2a\x2a\x71\x41\x10\xb1\x11\x57\xe4\xcc\xba\xdd\x51\x66\xed\x91\xc7\xbb\xa2\xfc\x7a\x34\xb4\x85\x9d\xa8\x44\x70\xaa\x4f\x23\xdb\xef\xf3\x9b\x77\x0a\xdc\x3b\xb8\x45\x1a\x85\x3b\xb2\x15\xa6\xf0\x95\x34\x07\x61\x07\x98\x52\xde\xce\xed\x6a\x24\xc3\x1e\x0d\xdd\x0a\x80\x71\x24\x07\x2a\x93\x91\xae\x00\x22\x1e\x29\xe6\x32\x80\xb2\xfe\x7b\x92\x13\xf9\xd2\xcd\x14\xc9\x9b\xe8\xe3\xc6\x88\xe6\x87\x8f\x0b\x49\x2d\x02\x30\x1a\x53\x44\xa3\xa7\xf5\xc5\xdd\x52\xb1\x52\x9e\x6b\x01\x9e\x8f\xfe\x7a\x93\xce\xc1\xd3\x8d\xf7\x32\xb1\x7d\xaa\x5d\x97\x62\xe9\xa9\xab\xdc\x95\x6a\x4a\x7b\xad\x12\x69\x73\x9a\x8e\xa4\x4c\x46\x79\x13\x64\x1b\xf8\x4e\xb1\x71\xd0\x98\x4e\xd4\x3c\xed\x7b\x61\xc3\xc0\xa4\x0b\x53\xeb\xf3\x88\x9e\x2b\x8c\x78\x4f\x0e\x9a\x5e\xfc\x89\xb4\x30\x25\x11\xe7\x21\xdc\xd9\x56\x34\xdc\x07\x5e\x0f\x98\x54\xbe\x3f\xac\x1f\xb5\x6e\xde\x6d\xda\x76\x73\xd5\x2c\x20\x49\xd4\x16\xc7\xfe\x9c\x1b\xcc\xd2\xa2\xbd\xf0\xb6\x17\x35\x07\x6f\xaf\xaa\x69\x52\x31\xf1\x12\x1d\x1c\xde\xef\xff\x82\xcb\x97\x78\xd7\xd7\xbb\xff\x02\x66\x43\xbb\x08\x6c\xdf\xed\xde\xfc\x13\x91\x78\x7e\x29\x80\xee\x70\x73\xe8\xbe\xed\x3f\x7f\x39\x54\x94\x19\xe3\x54\x52\x2f\xf8\x65\x90\x31\xcc\xc4\x94\xf3\x5e\xe5\x48\xae\x92\x04\x0e\x16\x30\xde\x52\xc4\x87\x8e\xbc\x70\x9f\x1d\xb4\x75\x7e\x25\x9f\x0f\x64\xb5\x10\x20\xa1\x0d\x0e\xb6\x03\x61\xb4\xe1\xc7\xf9\xf0\xa5\x7f\x2a\x61\x1f\x5e\xcf\xc8\xcf\x00\x00\x00\xff\xff\x03\xdb\x3a\x88\xff\x03\x00\x00")

func assetsRouterDaemonsetYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterDaemonsetYaml,
		"assets/router/daemonset.yaml",
	)
}

func assetsRouterDaemonsetYaml() (*asset, error) {
	bytes, err := assetsRouterDaemonsetYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/daemonset.yaml", size: 1023, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsRouterServiceAccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xce\x31\x4a\x00\x31\x10\x85\xe1\x3e\xa7\x78\xb0\xfd\x82\x6d\x3a\x4b\x5b\x05\xfb\x98\x3c\x75\x30\x9b\x89\x33\x93\x15\x6f\x2f\x2b\x7b\x80\xff\xe7\xdb\xf0\x58\xab\xae\x11\x78\x57\x83\xe9\x0a\x9a\xa3\x1a\x4b\xb0\xe1\xed\x17\xf1\x49\xe8\xa4\x95\x50\xdb\xf1\x14\xf8\x91\xde\x61\xfc\x5e\x62\x44\xed\xcb\x83\x06\xaf\x3a\xd9\xd2\x86\x49\x3b\xc4\x5d\x74\x38\x8c\xfd\xff\x12\x8a\xe7\x6b\x8c\x69\x5a\xe9\x2e\xe3\x63\x4f\x5f\x32\x5a\xc6\x0b\xed\x94\xca\xdb\x90\xca\x94\x57\xda\x55\x67\x9c\x0f\xe9\x60\x94\x56\xa2\xe4\x04\x8c\x72\x30\xdf\xc0\xf4\x17\x00\x00\xff\xff\x2e\x91\xa2\xa9\xb6\x00\x00\x00")

func assetsRouterServiceAccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterServiceAccountYaml,
		"assets/router/service-account.yaml",
	)
}

func assetsRouterServiceAccountYaml() (*asset, error) {
	bytes, err := assetsRouterServiceAccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/service-account.yaml", size: 182, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsRouterServiceCloudYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x31\x6f\x6a\x31\x0c\x85\xf7\xfc\x8a\x23\x31\x3f\xf4\xde\xf6\x74\x47\xba\x32\x20\x15\x75\x37\x89\x2f\x89\xc8\xb5\x23\xc7\xd0\xf2\xef\xab\x1b\xa0\x4b\xc7\x1c\xcb\x27\xdf\xe7\x0d\xf6\x4a\x09\x3b\xaa\x24\x91\x0d\xef\x6c\xb7\x12\x19\xae\x68\x95\x22\xa3\x08\x66\x53\x71\xe8\x0c\xcf\x0c\xd3\xab\xb3\xad\x71\xac\x7a\x4d\x60\xb9\x15\x53\x59\x58\xbc\x6f\xc3\xa5\x48\x9a\x5e\x25\x81\x5a\xf9\x60\xeb\x45\x65\xc2\xed\x5f\x58\xd8\x29\x91\xd3\x14\x00\xa1\x85\xa7\x67\x59\x00\x2a\x9d\xb8\xf6\x75\x00\x50\x6b\x3f\x93\xde\x38\xae\xa9\xdf\x1b\x4f\x03\xf5\x45\x1a\x80\xce\x95\xa3\xab\xfd\x5e\x03\x36\x38\xe6\xd2\x41\xb5\x2b\x32\xf5\x81\xce\xf3\xcc\x71\x88\x2c\x64\x97\x22\x67\xec\x77\x68\xaa\x15\x4e\x76\x66\xef\xa0\x8e\xab\x64\xa6\xea\xf9\x8e\xcf\xcc\x02\xd1\x51\xf6\xb4\x6e\x9a\x3a\xc8\x18\xcd\xb8\xf3\x7a\x14\x01\x41\x34\x31\x4e\x9c\x8b\xa4\xf1\x4f\x7f\xe8\x6f\x03\xc0\x5f\xce\x26\x54\x8f\x46\xf3\x5c\xe2\x41\x6b\x89\xf7\x55\x24\x52\x0d\x40\x53\xf3\x61\xfd\xe7\x79\x90\xec\xde\x86\x4d\x33\x75\x8d\x5a\x27\x1c\xdf\x0e\x8f\x44\xcd\x27\xfc\xff\x3b\x1e\x0f\xe0\xc3\x88\xc6\xce\x77\x00\x00\x00\xff\xff\x47\xad\x4a\x2f\xc8\x01\x00\x00")

func assetsRouterServiceCloudYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterServiceCloudYaml,
		"assets/router/service-cloud.yaml",
	)
}

func assetsRouterServiceCloudYaml() (*asset, error) {
	bytes, err := assetsRouterServiceCloudYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/service-cloud.yaml", size: 456, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/router/cluster-role-binding.yaml": assetsRouterClusterRoleBindingYaml,
	"assets/router/cluster-role.yaml": assetsRouterClusterRoleYaml,
	"assets/router/daemonset.yaml": assetsRouterDaemonsetYaml,
	"assets/router/service-account.yaml": assetsRouterServiceAccountYaml,
	"assets/router/service-cloud.yaml": assetsRouterServiceCloudYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"router": &bintree{nil, map[string]*bintree{
			"cluster-role-binding.yaml": &bintree{assetsRouterClusterRoleBindingYaml, map[string]*bintree{}},
			"cluster-role.yaml": &bintree{assetsRouterClusterRoleYaml, map[string]*bintree{}},
			"daemonset.yaml": &bintree{assetsRouterDaemonsetYaml, map[string]*bintree{}},
			"service-account.yaml": &bintree{assetsRouterServiceAccountYaml, map[string]*bintree{}},
			"service-cloud.yaml": &bintree{assetsRouterServiceCloudYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

