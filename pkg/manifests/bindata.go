// Code generated by go-bindata.
// sources:
// assets/router/cluster-role-binding.yaml
// assets/router/cluster-role.yaml
// assets/router/daemonset.yaml
// assets/router/namespace.yaml
// assets/router/service-account.yaml
// assets/router/service-cloud.yaml
// manifests/00-cluster-role.yaml
// manifests/00-custom-resource-definition.yaml
// manifests/00-namespace.yaml
// manifests/01-cluster-role-binding.yaml
// manifests/01-role-binding.yaml
// manifests/01-role.yaml
// manifests/01-service-account.yaml
// manifests/02-deployment.yaml
// DO NOT EDIT!

package manifests

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsRouterClusterRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8f\x31\x4f\xc4\x30\x0c\x85\xf7\xfc\x0a\xeb\x98\x5b\xc4\x86\xb2\x01\x3b\xc3\x21\xb1\xfb\x52\xdf\xd5\x5c\x1b\x57\xb6\x73\x12\xfc\x7a\x14\x25\x62\x80\xa1\x62\xb4\xf4\xfc\xde\xf7\xdd\xc1\x33\xe7\xc9\xc0\x67\x02\x95\xe2\xa4\xa0\xb2\x10\xb8\x00\xbb\xc1\x1b\xe9\x8d\x13\xc1\x53\x4a\x52\xb2\x8f\xe1\xca\x79\x8a\xf0\xb2\x14\x73\xd2\xa3\x2c\x54\xdf\x39\x5f\x02\x6e\xfc\x4e\x6a\x2c\x39\x82\x9e\x30\x8d\x58\x7c\x16\xe5\x2f\x74\x96\x3c\x5e\x1f\x6d\x64\xb9\xbf\x3d\x84\x95\x1c\x27\x74\x8c\x01\x20\xe3\x4a\x11\x52\x6b\x1b\x38\x5f\x94\xcc\x62\xe3\x08\x56\x4e\x1f\x94\xdc\x62\x18\xa0\xcd\x76\x9a\x0e\xf3\xf3\xdf\xf3\xed\xb4\x0d\x13\x45\x90\x8d\xb2\xcd\x7c\xf6\xe1\x57\xfb\xd0\xd3\xd5\xf2\x48\xe7\x4a\xf1\xc7\x69\x8f\xec\x7f\x4b\xc5\x48\x5f\x6b\xbe\x8a\x1c\xec\xd3\x9c\xd6\x68\x4d\x05\x9b\x4a\xdc\x2b\xe9\xcb\x87\xf0\x1d\x00\x00\xff\xff\x23\x98\xf9\xf1\xb0\x01\x00\x00")

func assetsRouterClusterRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterClusterRoleBindingYaml,
		"assets/router/cluster-role-binding.yaml",
	)
}

func assetsRouterClusterRoleBindingYaml() (*asset, error) {
	bytes, err := assetsRouterClusterRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/cluster-role-binding.yaml", size: 432, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsRouterClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x91\x31\x6f\xe3\x30\x0c\x85\x77\xfd\x0a\x22\x37\xdb\xc1\x6d\x07\xad\x37\xdc\x1e\x1c\xba\xd3\x32\x53\xb3\x51\x44\x81\xa4\x1c\xa0\xbf\xbe\xb0\x9d\xa0\x41\x8b\x0e\x29\xba\xe9\x41\x78\x8f\xdf\x23\x7f\xc1\xdf\xdc\xcc\x49\xc1\x92\x54\x1a\x41\x25\x13\x1c\x45\x41\xa5\x39\xa9\xf5\xf0\x7f\x62\x03\x9b\xa4\xe5\x11\x06\x02\x34\x50\x32\x57\x4e\xce\xf3\x2a\xab\x98\xf1\x90\xa9\x0f\x27\x2e\x63\xbc\x25\x1e\x24\x53\xc0\xca\x4f\xa4\xc6\x52\x22\xe8\x80\xa9\xc7\xe6\x93\x28\xbf\xa2\xb3\x94\xfe\xf4\xc7\x7a\x96\xfd\xfc\x3b\x9c\xc9\x71\x44\xc7\x18\x00\x0a\x9e\x29\x42\xda\x62\x3a\x2e\xcf\x4a\x66\x71\x03\x0a\xda\x32\x59\x0c\x1d\x60\xe5\x7f\x2a\xad\xda\x62\xe9\x60\xb7\x0b\x00\xe8\xae\x3c\x34\xa7\xc3\x0d\x51\x8a\x45\x28\x2d\xe7\x00\x0b\xb7\x34\x4d\x74\x75\x50\x19\xab\x70\x71\x5b\xd5\x32\xd4\x2a\x26\xda\xa4\x91\xce\xbc\x89\x99\x74\xb8\x5a\x32\x9b\xaf\x8f\x0b\x7a\x9a\x3e\x43\x2c\xed\xa8\x38\xa7\xfb\x7a\x8f\x72\xb9\x9c\xa8\x28\xcd\x4c\x97\x2b\x4b\x1b\x5e\x28\x39\xa6\x44\x66\xef\x1f\x77\x5c\x49\x09\x9d\xbe\x58\x4a\xb7\xdd\xb2\x97\x4a\xc5\x26\x3e\xfa\x37\x98\xd6\x84\x07\x97\xf1\xc3\xc3\xf7\xe6\xe8\xed\x03\x43\xab\xe3\x52\xfc\x2d\x00\x00\xff\xff\x14\x2b\x2f\xcf\xc7\x02\x00\x00")

func assetsRouterClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterClusterRoleYaml,
		"assets/router/cluster-role.yaml",
	)
}

func assetsRouterClusterRoleYaml() (*asset, error) {
	bytes, err := assetsRouterClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/cluster-role.yaml", size: 711, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsRouterDaemonsetYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x93\x41\x6f\xdb\x30\x0c\x85\xef\xf9\x15\x84\x73\x4e\xd2\xa0\xc5\xb0\xe9\x16\xa4\xc1\x50\x60\x6d\x8d\x38\xeb\xb5\x60\x65\x26\x26\x2a\x4b\x02\x45\x67\xeb\x7e\xfd\xa0\x36\x5d\xed\x20\x2b\xba\xd3\x78\x32\xc4\xf7\x3e\x3e\x53\xd0\x18\x2e\x91\xda\xe0\x2b\x52\xf8\xc1\xda\x40\x4d\x5b\xec\x9c\xc2\x1e\x5d\x47\x69\x34\x86\xa5\xeb\x92\x92\xc0\x95\xdf\x09\xa5\x04\x29\x92\xe5\x2d\xdb\x83\x02\x50\x08\x30\x46\xc7\x54\x03\x2a\x48\xe7\x95\x5b\x9a\x8e\x1e\xd9\xd7\xe6\x8d\x3e\xc2\xc8\x77\x24\x89\x83\x37\x59\x9f\x66\xfb\xf9\xa8\x25\xc5\x1a\x15\xcd\x08\x60\x0c\x37\xd8\x12\x70\x82\x44\x3a\x20\x01\x78\x6c\x29\x45\xb4\x64\x20\x44\xf2\xa9\xe1\xad\x4e\xec\x4b\xb0\x09\xbf\x04\x9b\x48\xe8\x94\x64\x04\xe0\xf0\x81\x5c\xca\x4c\xc8\x93\x0c\x1c\x3a\x39\x79\x3e\x4d\xe4\xc8\x6a\x90\x17\x45\x8b\x6a\x9b\x6f\x3d\xcb\xd0\x04\xa0\xd4\x46\x87\x4a\x07\x79\x2f\x72\x2e\x37\x70\x1e\x7b\x01\x5e\x87\x3e\x7f\x93\xec\xd9\xd2\xc2\xda\xd0\x79\xcd\xbf\x3b\x90\x02\xf8\x50\x53\x35\x48\x97\xab\xc8\xc7\x13\x09\x8e\xa6\x8f\xdd\x03\x89\x27\xa5\x34\xe5\x30\x63\xbf\x15\x2c\x0c\x14\x2a\x1d\x15\x07\xbd\x0d\x5e\x91\x3d\x49\x2f\xd4\xe4\x79\x83\x47\xc3\x72\x71\x8b\x3b\x32\x50\xd4\xc1\x3e\x92\x64\xe6\x9f\xfd\xce\x82\xf0\x8e\xfd\xa4\xc1\x28\xe1\xe7\xd3\x61\xbd\x66\x7f\x3e\x9d\xcf\xa7\x67\xc5\x31\xa4\xec\x9c\x2b\x83\x63\xfb\x64\xe0\x6a\x7b\x13\xb4\x14\x4a\xe4\xb5\xa7\x8b\x41\xb4\x17\xea\x2d\x56\xa3\x1a\x7b\xc7\xbd\x7f\x28\x83\xa8\x81\xcf\x67\x83\x6e\x94\xa0\xc1\x06\x67\x60\xb3\x2c\xff\x82\x4b\xef\xf1\x2e\x2e\xce\xff\x09\x98\x14\xf5\x5d\xe0\xfc\xcb\xf9\xa7\x0f\x11\xc7\x70\x4d\xb2\x3b\x7a\x29\x6f\x6d\xf2\xfb\x53\xfb\xa9\x36\x8b\x4d\x75\x5f\xde\xae\x37\x83\x21\xcf\x0f\xd0\x40\x91\xa7\x17\x27\x6c\xeb\xdb\xef\x9b\xd5\xfa\xbe\x5a\xad\xef\xae\x96\xab\xfb\x9b\xc5\xf5\xaa\x2a\x17\xcb\xd5\x29\xc8\x07\x9e\xd5\x6b\x39\xde\x93\xa7\x94\x4a\x09\x0f\x64\x06\x30\xf6\xac\x8c\xee\x92\x1c\x3e\x55\x64\x83\xaf\x93\x81\xf9\xf0\xf6\xf2\xed\x7c\x25\x1d\x1a\x01\x22\x6a\x63\x60\xd6\x10\x3a\x6d\x7e\x1d\x37\x4f\x6d\x59\x08\x6b\xfe\x7f\x41\x7e\x07\x00\x00\xff\xff\x7a\x7b\xfb\x95\x3a\x05\x00\x00")

func assetsRouterDaemonsetYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterDaemonsetYaml,
		"assets/router/daemonset.yaml",
	)
}

func assetsRouterDaemonsetYaml() (*asset, error) {
	bytes, err := assetsRouterDaemonsetYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/daemonset.yaml", size: 1338, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsRouterNamespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcb\xb1\x0d\x02\x31\x0c\x05\xd0\x3e\x53\x58\xd7\x07\x44\x9b\x21\x28\xe9\xad\xe4\x03\x16\x17\x3b\xb2\x7d\xcc\x8f\xa8\x6e\x80\xf7\x11\x1d\x8d\xee\x3c\x11\x8b\x3b\x0a\x2f\x79\xc0\x43\x4c\x1b\x7d\x6f\x65\x22\x79\x70\x72\x2b\x44\xca\x13\x8d\x6c\x41\xe3\x2d\xcf\xac\x7d\x3f\x22\xe1\x55\xf4\xe5\x88\xa8\x6e\x47\xc2\x0b\x11\xab\x5a\x72\x8a\x69\xfc\x1d\x9d\xe6\x22\x76\x55\x1b\xa8\x81\x1d\x3d\xcd\x1b\x6d\x5b\xf9\x05\x00\x00\xff\xff\x68\xe9\x4e\xf7\x84\x00\x00\x00")

func assetsRouterNamespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterNamespaceYaml,
		"assets/router/namespace.yaml",
	)
}

func assetsRouterNamespaceYaml() (*asset, error) {
	bytes, err := assetsRouterNamespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/namespace.yaml", size: 132, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsRouterServiceAccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xce\xb1\x6a\x04\x31\x0c\x84\xe1\xde\x4f\x31\x70\xf5\x1e\xa4\x75\x97\x32\x6d\x02\xe9\x1d\xef\xdc\x9d\xc8\xae\xe5\x48\xf2\x86\xbc\x7d\xd8\xc3\xa5\x40\xf3\xf3\x5d\xf0\x5a\xab\x8e\x16\xb8\xa9\xc1\x74\x04\xcd\x51\x8d\x25\xb8\xe2\xeb\x0f\xf1\x20\xb4\xd3\x4a\xa8\x5d\xf1\x16\xf8\x95\x6d\x83\xf1\x67\x88\x11\x75\x1b\x1e\x34\x78\xd5\xce\x35\x5d\xd0\x69\xbb\xb8\x8b\x36\x87\x71\x7b\x56\x42\xf1\x7e\x86\xd1\x4d\x2b\xdd\xa5\xdd\xaf\xe9\x5b\xda\x9a\xf1\x41\x3b\xa4\x72\x1a\x52\xe9\xf2\x49\x3b\xd7\x19\xc7\x4b\xda\x19\x65\x2d\x51\x72\x02\x5a\xd9\x99\x27\x70\x9e\xde\x4b\x65\x3e\x75\xcd\x1f\x72\x8b\x65\x6a\x16\x69\x77\xa3\xfb\x32\xbf\xff\x03\x00\x00\xff\xff\x46\x51\x70\x49\xe4\x00\x00\x00")

func assetsRouterServiceAccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterServiceAccountYaml,
		"assets/router/service-account.yaml",
	)
}

func assetsRouterServiceAccountYaml() (*asset, error) {
	bytes, err := assetsRouterServiceAccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/service-account.yaml", size: 228, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsRouterServiceCloudYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x91\x31\x8b\xdc\x40\x0c\x85\x7b\xff\x8a\x07\x5b\xef\x91\x74\xc1\xe5\x5d\x15\x38\xc2\x42\x96\xf4\xba\xb1\xbc\x33\xdc\x58\x1a\x24\x79\x93\xfd\xf7\x61\xc6\x77\x45\x48\xe9\x87\x25\x7d\xef\x9b\x13\x5e\x95\x16\x3c\x53\x25\x49\x6c\xf8\xc9\x76\x2f\x89\x11\x8a\x56\x29\x31\x8a\x60\x35\x95\x80\xae\x88\xcc\x30\xdd\x83\xad\xc7\xa9\xea\xbe\x80\xe5\x5e\x4c\x65\x63\x09\x7f\x9a\x4e\x78\xa9\xbb\xf7\x1f\xbe\xcb\xcd\xd8\x1d\xde\x38\x95\xb5\x24\xdc\xa9\xee\xec\x20\x63\x50\x6b\xb5\xf0\x02\x0a\xd8\x2e\x51\x36\x7e\x9a\xde\x8b\x2c\xf3\xe7\xf9\x89\x5a\xf9\xc5\xe6\x45\x65\xc6\xfd\xeb\xb4\x71\xd0\x42\x41\xf3\x04\x9c\xf0\x83\x36\x46\x71\x38\xc7\x3f\x2b\x00\xa1\x8d\xbd\x51\xe2\x19\xda\x58\x3c\x97\x35\xce\xe9\x20\x3a\x97\x83\xe8\x7c\x34\x98\x80\x4a\x6f\x5c\xbd\xef\x44\x47\x9a\x3f\xba\x4d\x1d\xb9\xa7\xf1\x68\x3c\x0f\x3f\x9f\x7a\x26\xc0\xb9\x72\x0a\xb5\xff\xc7\x3a\xda\x35\x17\x07\x55\x57\x64\xf2\xe1\x8b\xd7\x95\xd3\xb0\xb7\x91\xbd\x17\xb9\xe1\xf5\x19\x4d\xb5\x22\xc8\x6e\x1c\x0e\x72\xec\x92\x99\x6a\xe4\x07\x7e\x67\x16\x88\x8e\x65\x1f\xaa\x9b\x2e\x87\xb6\x66\xec\xdc\x5f\x42\x40\x10\x5d\x18\x6f\x9c\x8b\x2c\xe3\x8e\x1f\xe6\xba\x05\xfe\x13\x6c\x42\xf5\x6a\xb4\xae\x25\x5d\xb4\x96\xf4\xe8\x45\x12\xd5\x09\x68\x6a\x31\x5a\x9f\x87\xaf\x19\x39\xa2\x8d\x36\xcd\x34\x34\x69\x9d\x71\x7d\xb9\x1c\x89\x5a\xcc\xf8\xf6\x65\x7c\x1c\xc0\x97\x11\x8d\x99\xbf\x01\x00\x00\xff\xff\x17\xe2\x05\xe9\x3d\x02\x00\x00")

func assetsRouterServiceCloudYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRouterServiceCloudYaml,
		"assets/router/service-cloud.yaml",
	)
}

func assetsRouterServiceCloudYaml() (*asset, error) {
	bytes, err := assetsRouterServiceCloudYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/router/service-cloud.yaml", size: 573, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifests00ClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\x41\x8f\xd3\x40\x0c\x85\xef\xf9\x15\x56\xf7\x86\xd4\x54\xdc\x50\xae\x1c\x38\x71\xe1\xc0\xdd\x9d\xbc\x6e\x4d\x93\xf1\xc8\xf6\x74\x81\x5f\x8f\x92\x4d\x85\x48\xbb\x15\xa8\xe2\xe6\x38\x9e\xe7\x6f\xde\x9b\x27\xfa\x38\x54\x0f\x18\x99\x0e\xa0\x83\x1a\xc5\x11\xa4\x05\xc6\xa1\x46\x12\x8e\xe1\xd0\x36\x27\xc9\x7d\x77\x99\xfd\xa2\x03\x1a\x2e\xf2\x15\xe6\xa2\xb9\x23\xdb\x73\x6a\xb9\xc6\x51\x4d\x7e\x72\x88\xe6\xf6\xf4\xc1\x5b\xd1\xdd\xf9\x7d\x33\x22\xb8\xe7\xe0\xae\x21\xca\x3c\xa2\xa3\xf4\x2a\xb3\x95\xfc\x6c\x70\xdf\x5e\xb6\x75\x97\xa2\xb1\x3a\xc0\xbb\x66\x4b\x5c\xe4\x93\x69\x2d\x3e\x9d\xde\xd2\x66\xd3\x10\x19\x5c\xab\x25\x2c\xbd\x49\xd3\x0b\x27\xf8\xfc\xe9\xb0\xb3\x24\x70\x4a\x5a\x73\xfc\xd1\x9b\x3e\xce\xb0\xfd\x72\x30\x19\x38\x30\x97\x83\x78\xcc\xc5\x0b\x47\x3a\x36\xd7\x8b\xb9\x94\x57\x29\x7c\x0f\xe4\xe9\xd6\x7e\x4d\xd2\x33\x46\xcd\x8e\x58\x2d\xda\xbc\xdb\xdc\x90\x7c\xd3\xb4\x6b\xe1\xc5\xb0\x29\x22\x5f\x37\xf6\x92\x7b\xc9\xcf\x0f\xdc\x6d\x89\xa1\xd5\x82\xec\x47\x39\xc4\x3d\x86\x65\x78\xed\xe5\x7a\xc9\x13\x7d\x16\x33\x35\xf4\x74\x30\x1d\x89\x7d\xb2\x65\x67\x5a\x03\xb6\xbb\x3c\x80\x89\xbf\xfd\xc1\xe3\xf0\x77\x49\x23\xf7\x45\xe5\x46\xa8\xab\x47\xf0\x36\xd7\xc3\x58\x53\x5e\xc8\x21\xe9\x7e\x60\xa1\x27\x64\xc3\x59\xf0\xb2\xc0\xd6\xfd\x37\xa4\xe0\x94\xe0\xfe\xfb\xc7\x75\x62\x0f\x13\xce\x93\xeb\x2c\x6f\xfb\x39\x8f\xfe\x67\xc3\xfe\x19\x67\xe7\xc1\x51\x57\x54\xb5\xf4\x93\x39\xbf\x02\x00\x00\xff\xff\x45\xd5\xee\x41\xae\x04\x00\x00")

func manifests00ClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests00ClusterRoleYaml,
		"manifests/00-cluster-role.yaml",
	)
}

func manifests00ClusterRoleYaml() (*asset, error) {
	bytes, err := manifests00ClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/00-cluster-role.yaml", size: 1198, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifests00CustomResourceDefinitionYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xb1\x4e\xc4\x30\x0c\x86\xf7\x3c\x85\x9f\x20\xa8\x1b\xca\x0a\x0b\x02\x31\x30\xb0\x9b\x9c\xaf\x67\x5d\x6a\x5b\xb1\x53\xf1\xf8\xa8\xed\xb1\xc0\x6d\xb6\xbe\xcf\xbf\x7e\x19\x8d\x3f\xa9\x3b\xab\x14\x40\x63\xfa\x0e\x92\x6d\xf3\x7c\x7d\xf4\xcc\xfa\xb0\x4e\x5f\x14\x38\xa5\x2b\xcb\xa9\xc0\xd3\xf0\xd0\xe5\x83\x5c\x47\xaf\xf4\x4c\x67\x16\x0e\x56\x49\x0b\x05\x9e\x30\xb0\x24\x00\xc1\x85\x0a\xd4\x36\x3c\xa8\xb3\xcc\x9d\xdc\xc9\xf3\x6d\xca\x6a\x24\x7e\xe1\x73\x64\xd6\xe4\x46\x75\xbb\x99\xbb\x0e\x2b\x70\xd7\x39\x12\x7d\xd3\x00\x6e\x3d\x8e\xf0\x97\x43\xdf\x41\x63\x8f\xd7\x3b\xf0\x8d\x3d\x76\xc1\xda\xe8\xd8\xfe\x17\xdb\xa1\xb3\xcc\xa3\x61\xff\x8b\x13\x80\x57\x35\x2a\xf0\xbe\x75\x30\xac\x74\x4a\x00\xeb\xef\xcf\xd6\x09\x9b\x5d\x70\x4a\x3f\x01\x00\x00\xff\xff\xf9\xe0\x67\x28\x49\x01\x00\x00")

func manifests00CustomResourceDefinitionYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests00CustomResourceDefinitionYaml,
		"manifests/00-custom-resource-definition.yaml",
	)
}

func manifests00CustomResourceDefinitionYaml() (*asset, error) {
	bytes, err := manifests00CustomResourceDefinitionYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/00-custom-resource-definition.yaml", size: 329, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifests00NamespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xb1\x11\x02\x41\x08\x05\xd0\x7c\xab\xa0\x81\x0d\x4c\xb7\x08\x43\xf3\x3f\x77\x5f\x65\x74\x81\x01\xb4\xfe\x7b\x1f\xb5\x73\xc9\x1d\x9b\x15\x38\x38\x10\xfa\x60\x96\xba\x2d\xf9\xdf\xc6\x66\xe3\x44\x63\x0d\x11\x11\xc3\xe6\x12\x0f\x5a\xbd\xf5\xd9\xf3\xf8\xfe\xaa\x99\x53\xed\x95\xac\x9a\x1e\x4c\xb4\xe7\xb8\x02\x00\x00\xff\xff\x01\xcb\xaf\xa7\x56\x00\x00\x00")

func manifests00NamespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests00NamespaceYaml,
		"manifests/00-namespace.yaml",
	)
}

func manifests00NamespaceYaml() (*asset, error) {
	bytes, err := manifests00NamespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/00-namespace.yaml", size: 86, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifests01ClusterRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\x31\x4f\xc4\x30\x0c\x46\xf7\xfc\x0a\x4b\xcc\x2d\x62\x43\xd9\x80\x81\xfd\x90\xd8\x7d\xa9\xef\x6a\xae\x67\x47\xb6\x73\x03\xbf\x1e\x45\x6d\x27\x04\x88\x2d\xc3\xd3\x97\xf7\x7c\x07\xcf\x2c\x93\x43\xcc\x04\x5a\xc9\x30\xd4\xa0\x2c\xcd\x83\x0c\x4c\x17\x82\x50\xe0\x70\x78\x23\xbb\x71\x21\x78\x2a\x45\x9b\xc4\x98\x2e\x2c\x53\x86\x97\x15\x3d\xe8\x42\x7d\x88\xe5\x9c\xb0\xf2\x3b\x99\xb3\x4a\x06\x3b\x62\x19\xb1\xc5\xac\xc6\x9f\x18\xac\x32\x5e\x1e\x7d\x64\xbd\xbf\x3d\xa4\x2b\x05\x4e\x18\x98\x13\x80\xe0\x95\xf2\xfe\xf1\xc0\x72\x36\x72\x1f\x76\xa3\xbc\x3f\x92\xb7\xe3\x07\x95\xf0\x9c\x06\x58\x0d\x36\xb1\xcd\xeb\xcf\xa9\x0d\xf0\x8a\x85\x72\x4f\x16\x9f\xf9\x14\xc3\x8f\x7c\x3f\xc2\x81\x4e\x5d\xf2\x5b\x72\x02\xc0\xca\xaf\xa6\xad\xfe\xd2\xfa\x8f\xbc\xaf\x00\x00\x00\xff\xff\x5b\xfd\x39\x77\x8f\x01\x00\x00")

func manifests01ClusterRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests01ClusterRoleBindingYaml,
		"manifests/01-cluster-role-binding.yaml",
	)
}

func manifests01ClusterRoleBindingYaml() (*asset, error) {
	bytes, err := manifests01ClusterRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/01-cluster-role-binding.yaml", size: 399, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifests01RoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xd0\xb1\x4e\x03\x31\x0c\xc6\xf1\x3d\x4f\x61\x89\xf9\x82\xd8\x50\x36\x58\xd8\x8b\xc4\xee\xe6\xdc\x9e\xe9\xd5\x8e\x6c\xe7\x06\x9e\x1e\x45\x1c\x62\x02\x96\xee\x5f\x94\x9f\xff\x77\xf0\xcc\x32\x3b\xc4\x42\xa0\x8d\x0c\x43\x0d\x4c\x57\x82\x50\xe0\x70\x78\x25\xdb\xb8\x12\x3c\xd5\xaa\x5d\x22\xa7\x0b\xcb\x5c\xe0\xa0\x2b\x8d\x97\x2c\xe7\x84\x8d\xdf\xc8\x9c\x55\x0a\xd8\x11\x6b\xc6\x1e\x8b\x1a\x7f\x60\xb0\x4a\xbe\x3c\x7a\x66\xbd\xdf\x1e\xd2\x95\x02\x67\x0c\x2c\x09\x40\xf0\x4a\x05\xea\xda\x3d\xc8\x26\x96\xb3\x91\xfb\xf4\x4d\xd8\x07\xde\xb0\x52\x19\x30\xf1\x85\x4f\x31\xfd\xba\xf7\x7e\x7c\xa7\x1a\x5e\xd2\x04\x5f\xc2\x1d\xbe\xbb\x6f\xff\xe3\x88\x74\xa0\xd3\xb8\xe5\x27\x49\x02\xc0\xc6\x2f\xa6\xbd\xfd\xd1\xe2\x7f\xcc\x67\x00\x00\x00\xff\xff\x4a\x32\x57\x38\x97\x01\x00\x00")

func manifests01RoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests01RoleBindingYaml,
		"manifests/01-role-binding.yaml",
	)
}

func manifests01RoleBindingYaml() (*asset, error) {
	bytes, err := manifests01RoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/01-role-binding.yaml", size: 407, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifests01RoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xc1\x4e\xc3\x30\x0c\x86\xef\x79\x0a\xab\xdc\x90\x5a\xc4\x0d\xf5\x05\xb8\x73\xe0\xee\xa5\xee\x66\x2d\x89\x23\xdb\xa9\x04\x4f\x8f\xd6\x75\x15\x62\x20\x6e\xf9\x93\xcf\xff\x67\xe5\x01\xde\x24\x11\xcc\xa2\xe0\x27\x02\xa9\xa4\xe8\xa2\xc0\x6e\x94\xe6\x21\x9c\xb9\x4c\xe3\xca\x04\xac\xfc\x4e\x6a\x2c\x65\x04\x3d\x60\x1c\xb0\xf9\x49\x94\x3f\xd1\x59\xca\x70\x7e\xb1\x81\xe5\x69\x79\x0e\x99\x1c\x27\x74\x1c\x03\x40\xc1\x4c\x23\xc4\xd4\xcc\x49\x7b\x2e\x47\x25\xb3\xfe\xa6\xd9\x00\xab\x18\x69\xbc\xc8\x8b\x9d\x78\xf6\xfe\x4f\x5e\x5b\x22\x1b\x43\x0f\x58\xf9\x55\xa5\x55\xbb\x48\x7a\xd8\xc0\x61\xaf\x18\x58\x02\x80\x92\x49\xd3\x48\x1b\xd5\x3d\x76\x01\x60\x21\x3d\x7c\xbb\xb8\xeb\xea\xba\xfb\xc9\x2a\x93\xad\x07\x23\x5d\x38\xd2\x35\x50\x99\xaa\x70\xf1\x6b\xaa\x97\xcf\x31\xa7\xe2\x8b\xa4\x96\x29\x26\xe4\xbc\x81\x0b\xdd\xa8\x28\x65\xe6\x63\xc6\x7a\xeb\x8b\x4a\xeb\xd3\x7f\x6b\x61\x5d\x47\x7e\x2c\x36\x51\x4d\xf2\x91\xf7\xfa\x09\x29\x4b\x31\xda\xa2\x52\x4d\x1c\x71\xcf\xe6\xe8\x34\xb7\x64\xbf\x3a\xbf\x02\x00\x00\xff\xff\x9f\x7c\xcb\x84\x0d\x02\x00\x00")

func manifests01RoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests01RoleYaml,
		"manifests/01-role.yaml",
	)
}

func manifests01RoleYaml() (*asset, error) {
	bytes, err := manifests01RoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/01-role.yaml", size: 525, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifests01ServiceAccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xce\x31\x6e\x85\x30\x10\x84\xe1\xde\xa7\x18\x89\x1a\xa4\xb4\xee\x52\xa6\x8e\x94\xde\xb2\x87\xb0\x0a\xd8\xce\xee\x9a\xf3\x47\x20\x52\xbe\xfe\xd3\xcc\x3f\xe1\x3d\xe7\x36\xaa\x63\x6d\x0a\xdf\x88\xd6\xa9\xc9\x9b\x42\xdc\xb8\xaf\x0b\x3e\x1c\xb6\xb5\xb1\x17\x28\x7f\x87\x28\x51\xd3\x41\xeb\x29\x13\x96\x5b\x67\x09\x13\x3a\xf5\x10\x33\x69\xd5\x96\xf0\x23\xb5\x44\x7c\x52\x4f\xc9\x7c\xf6\x43\xea\xf2\x45\xbd\x44\xc4\xf9\x16\x0e\x7a\x2a\xc9\x53\x0c\xb8\xf7\x22\xf2\x3e\xcc\xa9\xb3\xd4\x6f\xa5\xd9\xfc\x1f\xf2\x80\xfb\x30\x5e\x79\xd5\x36\x59\x7d\x7e\xe9\xff\x02\x00\x00\xff\xff\xfb\xf3\x0f\x99\xd4\x00\x00\x00")

func manifests01ServiceAccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests01ServiceAccountYaml,
		"manifests/01-service-account.yaml",
	)
}

func manifests01ServiceAccountYaml() (*asset, error) {
	bytes, err := manifests01ServiceAccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/01-service-account.yaml", size: 212, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifests02DeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xbf\x6e\xf2\x40\x10\xc4\x7b\x3f\xc5\x8a\xde\x1f\xa6\xf9\x8a\xeb\x2c\x42\x94\x22\x01\x8b\xa0\xa4\x8c\x36\xe7\x05\x4e\xb9\x7f\xba\x5d\x2c\xe5\xed\x23\x07\x83\x0e\x02\x09\x5b\x7a\x46\xbf\x9d\xd9\x33\x46\xf3\x42\x89\x4d\xf0\x0a\x30\x46\x1e\x77\x93\xe2\xc3\xf8\x56\xc1\x1d\x45\x1b\x3e\x1d\x79\x29\x1c\x09\xb6\x28\xa8\x0a\x00\x8f\x8e\x14\x68\xbb\x63\xa1\x54\x1a\xbf\x49\xc4\x5c\x86\x48\x09\x25\xa4\xc1\xc0\x11\x35\x29\x08\x91\x3c\x6f\xcd\x5a\xca\xab\x7e\x8e\xa4\x7b\x6c\xa2\x68\x8d\x46\x56\x30\x29\x00\x98\x2c\x69\x09\xa9\x57\x00\x1c\x8a\xde\x3e\xe2\x3b\x59\xde\x7f\xb8\x21\x85\x90\x8b\x16\x85\x06\x42\x56\xa0\x1f\x7b\x02\xbb\x01\x07\x70\x08\xda\x8f\x0e\x5e\xd0\x78\x4a\x19\xa2\xbc\x05\xb2\x1f\xe3\x70\x93\x5f\x67\x1c\x92\xd9\x18\x7f\xf5\x48\xaa\x2f\xc2\x92\x11\x62\x48\x92\xed\xee\xb7\x1f\x33\x35\x21\x89\x82\xff\x55\x55\x55\x99\xe1\xd0\xd1\x91\x24\xa3\x39\x53\x74\x70\x0e\x7d\x7b\x46\xfb\xbb\x05\xf9\x4e\x9d\x2c\x38\x5c\xe0\xb5\x5e\x4d\x1f\xde\xe6\xf5\xd3\xec\xb9\xa9\xa7\xb3\x13\x0f\x40\x87\x76\x47\xf7\x29\x38\x75\x26\x00\xac\x0d\xd9\x76\x49\xeb\x9f\xca\xa0\x35\x28\x5b\x75\x7c\xcc\x7f\xc7\x3f\xed\x62\x8c\x45\x33\x5b\xd6\xab\xc5\xf2\x3b\xc9\xa5\x10\x0a\x46\xd7\x6a\x8e\x06\x3f\x53\xea\x8c\xa6\x5a\xeb\xb0\xf3\x32\xff\xfd\x81\xbf\x02\x00\x00\xff\xff\xef\x91\x77\x04\x4b\x03\x00\x00")

func manifests02DeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests02DeploymentYaml,
		"manifests/02-deployment.yaml",
	)
}

func manifests02DeploymentYaml() (*asset, error) {
	bytes, err := manifests02DeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/02-deployment.yaml", size: 843, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/router/cluster-role-binding.yaml": assetsRouterClusterRoleBindingYaml,
	"assets/router/cluster-role.yaml": assetsRouterClusterRoleYaml,
	"assets/router/daemonset.yaml": assetsRouterDaemonsetYaml,
	"assets/router/namespace.yaml": assetsRouterNamespaceYaml,
	"assets/router/service-account.yaml": assetsRouterServiceAccountYaml,
	"assets/router/service-cloud.yaml": assetsRouterServiceCloudYaml,
	"manifests/00-cluster-role.yaml": manifests00ClusterRoleYaml,
	"manifests/00-custom-resource-definition.yaml": manifests00CustomResourceDefinitionYaml,
	"manifests/00-namespace.yaml": manifests00NamespaceYaml,
	"manifests/01-cluster-role-binding.yaml": manifests01ClusterRoleBindingYaml,
	"manifests/01-role-binding.yaml": manifests01RoleBindingYaml,
	"manifests/01-role.yaml": manifests01RoleYaml,
	"manifests/01-service-account.yaml": manifests01ServiceAccountYaml,
	"manifests/02-deployment.yaml": manifests02DeploymentYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"router": &bintree{nil, map[string]*bintree{
			"cluster-role-binding.yaml": &bintree{assetsRouterClusterRoleBindingYaml, map[string]*bintree{}},
			"cluster-role.yaml": &bintree{assetsRouterClusterRoleYaml, map[string]*bintree{}},
			"daemonset.yaml": &bintree{assetsRouterDaemonsetYaml, map[string]*bintree{}},
			"namespace.yaml": &bintree{assetsRouterNamespaceYaml, map[string]*bintree{}},
			"service-account.yaml": &bintree{assetsRouterServiceAccountYaml, map[string]*bintree{}},
			"service-cloud.yaml": &bintree{assetsRouterServiceCloudYaml, map[string]*bintree{}},
		}},
	}},
	"manifests": &bintree{nil, map[string]*bintree{
		"00-cluster-role.yaml": &bintree{manifests00ClusterRoleYaml, map[string]*bintree{}},
		"00-custom-resource-definition.yaml": &bintree{manifests00CustomResourceDefinitionYaml, map[string]*bintree{}},
		"00-namespace.yaml": &bintree{manifests00NamespaceYaml, map[string]*bintree{}},
		"01-cluster-role-binding.yaml": &bintree{manifests01ClusterRoleBindingYaml, map[string]*bintree{}},
		"01-role-binding.yaml": &bintree{manifests01RoleBindingYaml, map[string]*bintree{}},
		"01-role.yaml": &bintree{manifests01RoleYaml, map[string]*bintree{}},
		"01-service-account.yaml": &bintree{manifests01ServiceAccountYaml, map[string]*bintree{}},
		"02-deployment.yaml": &bintree{manifests02DeploymentYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

